/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 28 17:02:28 GMT 2017
 */

package com.pearson.eidetic.driver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.Snapshot;
import com.amazonaws.services.ec2.model.Volume;
import com.pearson.eidetic.driver.MonitorMethods;
import com.pearson.eidetic.driver.threads.EideticSubThread;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MonitorMethods_ESTest extends MonitorMethods_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonitorMethods.listsToArrayLists((List<List<Volume>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pearson.eidetic.driver.MonitorMethods", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      Integer integer0 = new Integer(2252);
      List<Snapshot> list0 = monitorMethods0.getAllSnapshotsOfVolume((AmazonEC2Client) null, (Volume) null, integer0, integer0, "H>L.epIdM");
      int int0 = monitorMethods0.getDaysBetweenNowAndNewestSnapshot(list0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      int int0 = monitorMethods0.getDaysBetweenNowAndNewestSnapshot((List<Snapshot>) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      int int0 = monitorMethods0.getHoursBetweenNowAndNewestSnapshot((List<Snapshot>) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      monitorMethods0.sortSnapshotsByDate((List<Snapshot>) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      Integer integer0 = new Integer((-2404));
      List<Snapshot> list0 = monitorMethods0.getAllSnapshotsOfVolume((AmazonEC2Client) null, (Volume) null, integer0, integer0, "4");
      monitorMethods0.sortSnapshotsByDate(list0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      Integer integer0 = new Integer(2252);
      List<Snapshot> list0 = monitorMethods0.getAllSnapshotsOfVolume((AmazonEC2Client) null, (Volume) null, integer0, integer0, "H>L.epIdM");
      int int0 = monitorMethods0.getHoursBetweenNowAndNewestSnapshot(list0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      ArrayList<ArrayList<Volume>> arrayList0 = monitorMethods0.splitArrayList((ArrayList<Volume>) null, (Integer) null);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      Integer integer0 = new Integer(0);
      ArrayList<ArrayList<Volume>> arrayList0 = monitorMethods0.splitArrayList((ArrayList<Volume>) null, integer0);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      boolean boolean0 = monitorMethods0.areAllThreadsDead((List<? extends EideticSubThread>) null);
      assertTrue(boolean0);
  }
}
