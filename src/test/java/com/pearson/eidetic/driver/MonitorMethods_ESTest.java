/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 04 21:23:21 GMT 2016
 */

package com.pearson.eidetic.driver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.auth.STSSessionCredentialsProvider;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.Snapshot;
import com.amazonaws.services.ec2.model.Volume;
import com.pearson.eidetic.driver.MonitorMethods;
import com.pearson.eidetic.driver.threads.EideticSubThread;
import com.pearson.eidetic.driver.threads.EideticSubThreadMethods;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MonitorMethods_ESTest extends MonitorMethods_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      LinkedList<Snapshot> linkedList0 = new LinkedList<Snapshot>();
      Snapshot snapshot0 = new Snapshot();
      MockDate mockDate0 = new MockDate(2, (-2444), (-2427), (-1878), (-2444));
      Snapshot snapshot1 = snapshot0.withStartTime(mockDate0);
      linkedList0.add(snapshot1);
      int int0 = monitorMethods0.getHoursBetweenNowAndNewestSnapshot(linkedList0);
      assertEquals(2828371, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      ArrayList<Snapshot> arrayList0 = new ArrayList<Snapshot>();
      Snapshot snapshot0 = new Snapshot();
      arrayList0.add(snapshot0);
      arrayList0.add(snapshot0);
      int int0 = monitorMethods0.getDaysBetweenNowAndNewestSnapshot(arrayList0);
      assertEquals(0, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      LinkedList<Snapshot> linkedList0 = new LinkedList<Snapshot>();
      linkedList0.offer((Snapshot) null);
      linkedList0.add((Snapshot) null);
      // Undeclared exception!
      try { 
        monitorMethods0.getHoursBetweenNowAndNewestSnapshot(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.pearson.eidetic.driver.MonitorMethods", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      EideticSubThreadMethods eideticSubThreadMethods0 = new EideticSubThreadMethods();
      Volume volume0 = new Volume();
      Integer integer0 = new Integer(2741);
      List<Snapshot> list0 = eideticSubThreadMethods0.getAllSnapshotsOfVolume((AmazonEC2Client) null, volume0, integer0, integer0, (String) null);
      ArrayList<Snapshot> arrayList0 = new ArrayList<Snapshot>((Collection<? extends Snapshot>) list0);
      Snapshot snapshot0 = new Snapshot();
      arrayList0.add(snapshot0);
      Snapshot snapshot1 = new Snapshot();
      arrayList0.add(snapshot1);
      // Undeclared exception!
      try { 
        monitorMethods0.sortSnapshotsByDate(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.pearson.eidetic.driver.MonitorMethods$1", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      Integer integer0 = new Integer(0);
      AmazonEC2Client amazonEC2Client0 = new AmazonEC2Client();
      Volume volume0 = new Volume();
      // Undeclared exception!
      try { 
        monitorMethods0.getAllSnapshotsOfVolume(amazonEC2Client0, volume0, integer0, integer0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.pearson.eidetic.driver.MonitorMethods", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      ArrayList<Volume> arrayList0 = new ArrayList<Volume>();
      ArrayList<ArrayList<Volume>> arrayList1 = monitorMethods0.splitArrayList(arrayList0, (Integer) null);
      assertNull(arrayList1);
  }

  @Test
  public void test06()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      AmazonEC2Client amazonEC2Client0 = new AmazonEC2Client();
      Volume volume0 = new Volume();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        monitorMethods0.getAllSnapshotsOfVolume(amazonEC2Client0, volume0, integer0, (Integer) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.pearson.eidetic.driver.MonitorMethods", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      LinkedList<List<Volume>> linkedList0 = new LinkedList<List<Volume>>();
      linkedList0.push((List<Volume>) null);
      // Undeclared exception!
      try { 
        MonitorMethods.listsToArrayLists(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      LinkedList<EideticSubThreadMethods> linkedList0 = new LinkedList<EideticSubThreadMethods>();
      EideticSubThreadMethods eideticSubThreadMethods0 = new EideticSubThreadMethods();
      linkedList0.add(eideticSubThreadMethods0);
      // Undeclared exception!
      try { 
        monitorMethods0.areAllThreadsDead(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported yet.
         //
         assertThrownBy("com.pearson.eidetic.driver.threads.EideticSubThreadMethods", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      ArrayList<Snapshot> arrayList0 = new ArrayList<Snapshot>();
      arrayList0.add((Snapshot) null);
      // Undeclared exception!
      try { 
        monitorMethods0.getDaysBetweenNowAndNewestSnapshot(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.pearson.eidetic.driver.MonitorMethods", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      ArrayList<Snapshot> arrayList0 = new ArrayList<Snapshot>();
      int int0 = monitorMethods0.getDaysBetweenNowAndNewestSnapshot(arrayList0);
      assertEquals((-1), int0);
  }

  @Test
  public void test11()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      int int0 = monitorMethods0.getDaysBetweenNowAndNewestSnapshot((List<Snapshot>) null);
      assertEquals((-1), int0);
  }

  @Test
  public void test12()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      LinkedList<Snapshot> linkedList0 = new LinkedList<Snapshot>();
      Snapshot snapshot0 = new Snapshot();
      linkedList0.add(snapshot0);
      int int0 = monitorMethods0.getHoursBetweenNowAndNewestSnapshot(linkedList0);
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      ArrayList<Snapshot> arrayList0 = new ArrayList<Snapshot>();
      int int0 = monitorMethods0.getHoursBetweenNowAndNewestSnapshot(arrayList0);
      assertEquals((-1), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      int int0 = monitorMethods0.getHoursBetweenNowAndNewestSnapshot((List<Snapshot>) null);
      assertEquals((-1), int0);
  }

  @Test
  public void test15()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      EideticSubThreadMethods eideticSubThreadMethods0 = new EideticSubThreadMethods();
      Volume volume0 = new Volume();
      Integer integer0 = new Integer(2741);
      List<Snapshot> list0 = eideticSubThreadMethods0.getAllSnapshotsOfVolume((AmazonEC2Client) null, volume0, integer0, integer0, (String) null);
      monitorMethods0.sortSnapshotsByDate(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      monitorMethods0.sortSnapshotsByDate((List<Snapshot>) null);
  }

  @Test
  public void test17()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      BasicAWSCredentials basicAWSCredentials0 = new BasicAWSCredentials("^V9hk')JQ", "^V9hk')JQ");
      STSSessionCredentialsProvider sTSSessionCredentialsProvider0 = new STSSessionCredentialsProvider((AWSCredentials) basicAWSCredentials0);
      AmazonEC2Client amazonEC2Client0 = new AmazonEC2Client((AWSCredentialsProvider) sTSSessionCredentialsProvider0);
      Integer integer0 = new Integer(986);
      List<Snapshot> list0 = monitorMethods0.getAllSnapshotsOfVolume(amazonEC2Client0, (Volume) null, integer0, integer0, "com.amazonaws.services.dynamodbv2.model.StreamSpecification");
      assertEquals(0, list0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      Volume volume0 = new Volume();
      Integer integer0 = new Integer(2741);
      List<Snapshot> list0 = monitorMethods0.getAllSnapshotsOfVolume((AmazonEC2Client) null, volume0, integer0, integer0, "self");
      assertTrue(list0.isEmpty());
  }

  @Test
  public void test19()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      ArrayList<Volume> arrayList0 = new ArrayList<Volume>();
      Integer integer0 = new Integer(2);
      ArrayList<ArrayList<Volume>> arrayList1 = monitorMethods0.splitArrayList(arrayList0, integer0);
      assertFalse(arrayList1.isEmpty());
  }

  @Test
  public void test20()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      ArrayList<ArrayList<Volume>> arrayList0 = monitorMethods0.splitArrayList((ArrayList<Volume>) null, (Integer) null);
      assertNull(arrayList0);
  }

  @Test
  public void test21()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      ArrayList<Volume> arrayList0 = new ArrayList<Volume>();
      Integer integer0 = new Integer(0);
      ArrayList<ArrayList<Volume>> arrayList1 = monitorMethods0.splitArrayList(arrayList0, integer0);
      assertNotNull(arrayList1);
      
      ArrayList<List<Volume>> arrayList2 = new ArrayList<List<Volume>>((Collection<? extends List<Volume>>) arrayList1);
      ArrayList<ArrayList<Volume>> arrayList3 = MonitorMethods.listsToArrayLists(arrayList2);
      assertTrue(arrayList3.equals((Object)arrayList1));
      assertEquals(1, arrayList3.size());
  }

  @Test
  public void test22()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      ArrayList<EideticSubThreadMethods> arrayList0 = new ArrayList<EideticSubThreadMethods>();
      arrayList0.add((EideticSubThreadMethods) null);
      // Undeclared exception!
      try { 
        monitorMethods0.areAllThreadsDead(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.pearson.eidetic.driver.MonitorMethods", e);
      }
  }

  @Test
  public void test23()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      ArrayList<EideticSubThreadMethods> arrayList0 = new ArrayList<EideticSubThreadMethods>();
      boolean boolean0 = monitorMethods0.areAllThreadsDead(arrayList0);
      assertTrue(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      MonitorMethods monitorMethods0 = new MonitorMethods();
      boolean boolean0 = monitorMethods0.areAllThreadsDead((List<? extends EideticSubThread>) null);
      assertTrue(boolean0);
  }
}
