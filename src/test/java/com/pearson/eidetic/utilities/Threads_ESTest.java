/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 28 17:01:16 GMT 2017
 */

package com.pearson.eidetic.utilities;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pearson.eidetic.utilities.Threads;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Threads_ESTest extends Threads_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Threads.sleepMinutes((-121.0));
      Threads.sleepSeconds(1077, false);
      LinkedList<MockThread> linkedList0 = new LinkedList<MockThread>();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      MockThread mockThread0 = new MockThread();
      MockThread.dumpStack();
      linkedList0.add(mockThread0);
      MockThread mockThread1 = linkedList0.poll();
      MockThread.interrupted();
      Thread[] threadArray0 = new Thread[3];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread1;
      threadArray0[2] = (Thread) mockThread1;
      linkedList0.add(mockThread1);
      Threads.threadExecutorCachedPool(linkedList0, 0, timeUnit0);
      linkedList0.listIterator();
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      Threads.threadExecutorFixedPool(linkedList0, 1077, 1382, timeUnit1);
      Integer integer0 = new Integer(1077);
      Threads.sleepMinutes(1.0, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Threads.sleepSeconds(0);
      Threads.sleepMinutes(0);
      LinkedList<MockThread> linkedList0 = new LinkedList<MockThread>();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Threads.threadExecutorFixedPool(linkedList0, 0, 1, timeUnit0);
      Threads.threadExecutorFixedPool(linkedList0, 0, 0, timeUnit0);
      Threads threads0 = new Threads();
      MockThread mockThread0 = new MockThread("/*");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      linkedList0.add(mockThread0);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Threads.threadExecutorCachedPool(linkedList0, 1, timeUnit1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Threads.sleepMinutes((-1.0));
      Threads.sleepMilliseconds(0L);
      Threads.sleepMinutes(113, false);
      Threads.sleepMilliseconds((long) 113);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1783);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Threads.shutdownThreadExecutor((ExecutorService) null, integer0, timeUnit0, true, true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Threads.sleepSeconds(0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Threads.sleepMinutes(0);
      Threads.sleepMilliseconds(2862L, false);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Integer integer0 = new Integer(0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Threads.shutdownThreadExecutor(forkJoinPool0, integer0, timeUnit0, false, true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Integer integer0 = new Integer(1000);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Threads.shutdownThreadExecutor(forkJoinPool0, integer0, timeUnit0, true, true);
      Threads.sleepMinutes(1);
      Threads.sleepMinutes(1, true);
      Threads.sleepMinutes((-2057), true);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      linkedList0.add((Object) timeUnit0);
      Threads.threadExecutorCachedPool(linkedList0, (-262), timeUnit0);
      Threads.threadExecutorFixedPool(linkedList0, (-262), (-262), timeUnit0);
      Threads.threadExecutorFixedPool(linkedList0, 47, 1451, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockThread mockThread0 = new MockThread();
      linkedList0.add((Object) mockThread0);
      linkedList0.offerFirst(linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Threads.threadExecutorFixedPool(linkedList0, 1777, 1777, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<MockThread> linkedList0 = new LinkedList<MockThread>();
      MockThread mockThread0 = new MockThread("");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, (Runnable) mockThread0, "", (long) 47);
      MockThread mockThread2 = new MockThread((Runnable) mockThread1, "");
      MockThread mockThread3 = new MockThread((ThreadGroup) null, (Runnable) mockThread2, "I5?q9V");
      linkedList0.add(mockThread3);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Threads.threadExecutorFixedPool(linkedList0, 47, (-4221), timeUnit0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Threads.sleepSeconds(1777, false);
      Threads.sleepMinutes(1777);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockThread mockThread0 = new MockThread();
      linkedList0.add((Object) mockThread0);
      linkedList0.offerFirst(linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Threads.threadExecutorFixedPool(linkedList0, 1777, 0, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Integer integer0 = new Integer((-294));
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Threads.shutdownThreadExecutor(forkJoinPool0, integer0, timeUnit0, false, true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Threads.sleepMinutes(1000.0, true);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Threads.threadExecutorFixedPool(linkedList0, (-2146312719), (-2146312719), timeUnit0);
      Integer integer0 = new Integer(944);
      linkedList0.add(integer0);
      Threads.threadExecutorCachedPool(linkedList0, 93, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Threads.sleepSeconds((-2785), true);
      Threads.sleepSeconds(1035.0, true);
      Threads threads0 = new Threads();
      Threads.sleepMinutes(857.36272, true);
      Threads.sleepMilliseconds(0L, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Threads.threadExecutorCachedPool((List) null, 0, timeUnit0);
      Threads.sleepMinutes(2147483627, true);
      Threads.threadExecutorCachedPool((List) null, 2147483627, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Threads.sleepMinutes(0.0, true);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Threads.threadExecutorFixedPool((List) null, 2146681450, 2146681450, timeUnit0);
      Threads.sleepMinutes(0.0, true);
      Threads.sleepSeconds((double) 2146681450, true);
      Threads.sleepSeconds((-1371.758386257), true);
      Threads.sleepSeconds(2146681450, true);
      Threads.sleepMilliseconds(2633L, true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Threads.sleepSeconds(60, true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Threads.sleepMilliseconds(1133L, true);
      Threads.sleepSeconds((double) 1133L, true);
      LinkedList<MockThread> linkedList0 = new LinkedList<MockThread>();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Threads.threadExecutorFixedPool(linkedList0, 124, 124, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Threads.sleepMinutes(0);
      LinkedList<MockThread> linkedList0 = new LinkedList<MockThread>();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Threads.threadExecutorCachedPool(linkedList0, 0, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Threads.sleepMinutes(1.0);
      Threads.sleepSeconds(0);
      Threads.sleepMilliseconds((long) 0, false);
      Threads.sleepSeconds(0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, (ThreadFactory) null, (RejectedExecutionHandler) threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Threads.sleepMinutes(1682.08837218);
      Threads.sleepMinutes(11);
      Threads.sleepMinutes(1682.08837218);
      Threads.sleepSeconds((-2255.59342), true);
      Threads threads0 = new Threads();
      Threads.sleepMinutes(11, true);
      Threads threads1 = new Threads();
      Threads.sleepSeconds((-3658), false);
      Threads threads2 = new Threads();
      Threads.sleepMilliseconds((long) (-3658), true);
      Threads threads3 = new Threads();
      LinkedList<MockThread> linkedList0 = new LinkedList<MockThread>();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      MockThread mockThread0 = new MockThread("^(");
      MockThread mockThread1 = new MockThread((Runnable) mockThread0);
      linkedList0.push(mockThread1);
      Threads.threadExecutorCachedPool(linkedList0, 2146, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Threads.sleepSeconds(206.57, false);
      Threads.sleepMinutes(206.57, false);
      Threads.sleepSeconds((-1.0));
      long long0 = 0L;
      Threads.sleepMilliseconds(0L, false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(60);
      linkedList0.parallelStream();
      String string0 = "r(;SD5";
      try { 
        Integer.decode("r(;SD5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"r(;SD5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      Threads.sleepSeconds(0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      int int1 = 0;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Locale.LanguageRange locale_LanguageRange0 = null;
      linkedList0.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      Threads.threadExecutorFixedPool(linkedList0, 0, 0, timeUnit0);
      linkedList0.parallelStream();
      int int2 = (-2697);
      // Undeclared exception!
      try { 
        linkedList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Threads.sleepMinutes((-121.0));
      Threads.sleepSeconds(1077, false);
      LinkedList<MockThread> linkedList0 = new LinkedList<MockThread>();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      MockThread mockThread0 = new MockThread();
      MockThread.dumpStack();
      linkedList0.add(mockThread0);
      MockThread mockThread1 = linkedList0.poll();
      MockThread.interrupted();
      Thread[] threadArray0 = new Thread[3];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread1;
      threadArray0[2] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      linkedList0.add(mockThread1);
      Threads.threadExecutorCachedPool(linkedList0, 0, timeUnit0);
      linkedList0.listIterator();
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      Threads.threadExecutorFixedPool(linkedList0, 1077, 1382, timeUnit1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3);
      Integer integer0 = new Integer(1077);
      Threads.shutdownThreadExecutor(forkJoinPool0, integer0, timeUnit1, false, false);
      Threads.shutdownThreadExecutor(forkJoinPool0, integer0, timeUnit0, true, false);
      Threads.shutdownThreadExecutor(forkJoinPool0, (Integer) null, timeUnit0, false, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Threads.sleepSeconds(11);
      Threads.sleepMinutes(0);
      boolean boolean0 = true;
      Threads.sleepMinutes((double) 11, true);
      Threads.sleepSeconds((-2463));
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(0, (-2463), (long) 0, timeUnit0, (BlockingQueue<Runnable>) synchronousQueue0, (RejectedExecutionHandler) threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = (-394);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque0.add(linkedList0);
      linkedBlockingDeque0.peekLast();
      linkedBlockingDeque0.offer((Object) linkedList0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      linkedBlockingDeque0.toArray();
      // Undeclared exception!
      try { 
        linkedList0.replaceAll((UnaryOperator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = true;
      Threads.sleepSeconds((-1155.36917), true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedTransferQueue0, locale_FilteringMode0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Threads.threadExecutorFixedPool(list0, 0, 0, timeUnit0);
      ThreadGroup threadGroup0 = new ThreadGroup("xP!d157:@ruHkq?");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "3{(ZM");
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(0, (ForkJoinPool.ForkJoinWorkerThreadFactory) null, (Thread.UncaughtExceptionHandler) threadGroup1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Threads.sleepMilliseconds(0L);
      Threads.sleepMilliseconds((-3119L), false);
      Threads.sleepMilliseconds(287L, false);
      Threads.sleepSeconds((double) (-3119L));
      Threads.sleepSeconds(1.0);
      Threads.sleepMilliseconds(287L, false);
      Threads.sleepMinutes(0, false);
  }
}
