/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 04 21:13:38 GMT 2016
 */

package com.pearson.eidetic.utilities;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pearson.eidetic.utilities.Threads;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Threads_ESTest extends Threads_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Integer integer0 = new Integer(1000);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Threads.shutdownThreadExecutor(forkJoinPool0, integer0, timeUnit0, true, true);
      Threads.sleepMinutes(1);
      Threads.sleepMinutes(1, false);
      Threads.sleepMinutes((-2057), true);
  }

  @Test
  public void test01()  throws Throwable  {
      Threads.sleepSeconds((-798.73), true);
      Threads.sleepMinutes(689);
      LinkedList<Threads> linkedList0 = new LinkedList<Threads>();
      linkedList0.clone();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Threads.threadExecutorFixedPool(linkedList0, 689, 2658, timeUnit0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add((Locale.LanguageRange) null);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Threads.threadExecutorFixedPool(linkedList1, 2658, (-4358), timeUnit1);
      TimeUnit timeUnit2 = TimeUnit.NANOSECONDS;
      Threads.threadExecutorFixedPool(linkedList1, 0, 2658, timeUnit2);
      Threads.sleepSeconds((-4358));
      Threads.sleepMinutes(345.5386);
  }

  @Test
  public void test02()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Integer integer0 = new Integer((-294));
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Threads.shutdownThreadExecutor(forkJoinPool0, integer0, timeUnit0, false, true);
  }

  @Test
  public void test03()  throws Throwable  {
      Threads.sleepMilliseconds((-3746L));
  }

  @Test
  public void test04()  throws Throwable  {
      Threads.sleepSeconds(1777, false);
      Threads.sleepMinutes(1777);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockThread mockThread0 = new MockThread();
      linkedList0.add((Object) mockThread0);
      linkedList0.offerFirst(linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Threads.threadExecutorFixedPool(linkedList0, 1777, 0, timeUnit0);
  }

  @Test
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      linkedList0.add((Object) timeUnit0);
      Threads.threadExecutorCachedPool(linkedList0, (-262), timeUnit0);
      Threads.threadExecutorFixedPool(linkedList0, (-262), (-262), timeUnit0);
      Threads.threadExecutorFixedPool(linkedList0, 47, 1451, timeUnit0);
  }

  @Test
  public void test06()  throws Throwable  {
      Threads.sleepSeconds(1777, false);
      Threads.sleepMinutes(1777);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Threads.threadExecutorFixedPool(linkedList0, 1777, 0, timeUnit0);
  }

  @Test
  public void test07()  throws Throwable  {
      Threads.sleepMinutes((-1988.68568054477), true);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(47, 47, (long) 47, timeUnit0, blockingQueue0, (RejectedExecutionHandler) threadPoolExecutor_AbortPolicy0);
      Integer integer0 = new Integer(2147483646);
      Threads.shutdownThreadExecutor(threadPoolExecutor0, integer0, timeUnit0, false, true);
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayBlockingQueue<String> arrayBlockingQueue0 = new ArrayBlockingQueue<String>(3, false, (Collection<? extends String>) set0);
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) arrayBlockingQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("sun.util.locale.LocaleMatcher", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2153);
      Integer.compare(2153, 215);
      Integer.sum((-386), 0);
      linkedList0.add(integer0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Threads.threadExecutorCachedPool(linkedList0, 215, timeUnit0);
      Threads.threadExecutorCachedPool(linkedList0, 47, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      Threads.threadExecutorFixedPool(linkedList0, 0, (-2137766526), timeUnit1);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      Threads.threadExecutorCachedPool(linkedList0, 47, timeUnit0);
  }

  @Test
  public void test09()  throws Throwable  {
      Threads.sleepMinutes(1.5, false);
      boolean boolean0 = true;
      Threads.sleepSeconds(0.0, true);
      LinkedList<MockThread> linkedList0 = new LinkedList<MockThread>();
      MockThread mockThread0 = new MockThread();
      mockThread0.run();
      MockThread.dumpStack();
      linkedList0.add(mockThread0);
      linkedList0.add(mockThread0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Threads.threadExecutorCachedPool(linkedList0, 41, timeUnit0);
      Threads.sleepSeconds(0);
      Threads.sleepMinutes(1000.0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      Threads.threadExecutorFixedPool(linkedList0, 41, 60, timeUnit1);
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-2145605460), (-1309), 1L, timeUnit1, (BlockingQueue<Runnable>) linkedBlockingQueue0, (RejectedExecutionHandler) threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Threads.threadExecutorFixedPool(linkedList0, (-2168), 1923, timeUnit0);
  }

  @Test
  public void test11()  throws Throwable  {
      Threads.sleepSeconds(0.0, true);
      LinkedList<MockThread> linkedList0 = new LinkedList<MockThread>();
      MockThread mockThread0 = new MockThread();
      linkedList0.add(mockThread0);
      mockThread0.run();
      MockThread.dumpStack();
      linkedList0.add(mockThread0);
      linkedList0.add(mockThread0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Threads.threadExecutorCachedPool(linkedList0, 41, timeUnit0);
      Threads.sleepSeconds(0);
      Threads.sleepMinutes(1000.0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      Threads.threadExecutorFixedPool(linkedList0, 41, 60, timeUnit1);
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      Integer integer0 = new Integer(41);
  }

  @Test
  public void test12()  throws Throwable  {
      Threads.sleepMilliseconds(0L);
      Threads.sleepMinutes((double) 0L);
      Threads threads0 = new Threads();
      Threads.sleepSeconds(101);
  }

  @Test
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1783);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Threads.shutdownThreadExecutor((ExecutorService) null, integer0, timeUnit0, true, true);
  }

  @Test
  public void test14()  throws Throwable  {
      Threads.sleepSeconds(0.0);
      Threads.sleepMinutes((-1276));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Threads.threadExecutorCachedPool(linkedList0, 0, timeUnit0);
      Threads threads0 = new Threads();
  }

  @Test
  public void test15()  throws Throwable  {
      Threads.sleepMilliseconds(2197L, false);
      Threads.sleepMilliseconds(1L, false);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      forkJoinPool0.isTerminated();
      ForkJoinPool.commonPool();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Threads.shutdownThreadExecutor(forkJoinPool0, (Integer) null, timeUnit0, false, false);
      Threads.sleepSeconds(2940.0962713633703, false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) priorityBlockingQueue0, locale_FilteringMode0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      Threads.threadExecutorCachedPool(list0, 1, timeUnit1);
  }

  @Test
  public void test16()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      forkJoinPool0.awaitTermination(1000, timeUnit0);
      Integer integer0 = new Integer(1000);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Threads.shutdownThreadExecutor(forkJoinPool0, integer0, timeUnit1, true, false);
      Threads.sleepMinutes(1);
      Threads.sleepMinutes(1, false);
      Threads.sleepMinutes((-2057), false);
  }

  @Test
  public void test17()  throws Throwable  {
      Threads.sleepSeconds(269.0);
      Threads.sleepMinutes(0, true);
      Threads threads0 = new Threads();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, (RejectedExecutionHandler) threadPoolExecutor_DiscardPolicy0);
      Integer integer0 = new Integer(0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Threads.shutdownThreadExecutor(scheduledThreadPoolExecutor0, integer0, timeUnit0, true, false);
      Threads.sleepMinutes(0);
      Threads.sleepMinutes(0, false);
  }

  @Test
  public void test18()  throws Throwable  {
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(11);
      Integer integer0 = new Integer(11);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      scheduledThreadPoolExecutor0.isShutdown();
      Threads.shutdownThreadExecutor(scheduledThreadPoolExecutor0, integer0, timeUnit0, true, true);
      Locale locale0 = Locale.KOREAN;
      locale0.getUnicodeLocaleAttributes();
  }

  @Test
  public void test19()  throws Throwable  {
      Threads.sleepSeconds((-2785), true);
      Threads.sleepSeconds(1035.0, true);
      Threads threads0 = new Threads();
      Threads.sleepMinutes(857.36272, true);
      Threads.sleepMilliseconds(0L, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Threads.threadExecutorCachedPool((List) null, 0, timeUnit0);
      Threads.sleepMinutes(2147483627, true);
      Threads.threadExecutorCachedPool((List) null, 2147483627, timeUnit0);
  }

  @Test
  public void test20()  throws Throwable  {
      Threads.sleepMinutes(0.0, true);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Threads.threadExecutorFixedPool((List) null, 2146681450, 2146681450, timeUnit0);
      Threads.sleepMinutes(0.0, true);
      Threads.sleepSeconds((double) 2146681450, true);
      Threads.sleepSeconds((-1371.758386257), true);
      Threads.sleepSeconds(2146681450, true);
      Threads.sleepMilliseconds(2633L, true);
  }
}
