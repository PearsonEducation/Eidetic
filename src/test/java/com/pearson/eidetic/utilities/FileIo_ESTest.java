/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 28 16:49:29 GMT 2017
 */

package com.pearson.eidetic.utilities;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pearson.eidetic.utilities.FileIo;
import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.eclipse.jetty.util.RegexSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIo_ESTest extends FileIo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'/Wc");
      String string0 = FileIo.readFileToString((File) mockFile0, 0, 1003);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile("79", "79", "=]t`/IA'YmyjC{zWj", "Warning - failed to delete ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = FileIo.renameFile(" seconds", "mC^V", "#k#YM~yM2 2zc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = FileIo.doesFileExist("Warning - ", "HRb*Eqr(J0dC;!@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("org.eclipse.jetty.http.PathMap", "Warning - ", " milliseconds");
      boolean boolean1 = FileIo.createDirectory("org.eclipse.jetty.http.PathMap", "R");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = FileIo.createDirectory("W<NmA", "org.eclipse.jetty.http.PathMap");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = FileIo.saveStringToFile("*=", "*=", "_/7dE@0~mpU1GA");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = FileIo.saveStringToFile("[*", "'9SL(6-gMG9J:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/testuser/Documents/NetBeansProjects/eidetic/`l/null");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "+vaK;vhnIP +");
      String string0 = FileIo.readFileToString("`l", (String) null);
      assertNotNull(string0);
      assertEquals("+vaK;vhnIP +", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("com.pearson.eidetic.utilities.StackTrace", "Warning - failed to delete ");
      assertTrue(boolean0);
      
      String string0 = FileIo.readFileToString("com.pearson.eidetic.utilities.StackTrace");
      assertEquals("Warning - failed to delete ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$Lh2nXfK,P14Hl", "Warning - ");
      mockFile0.createNewFile();
      String string0 = FileIo.readFileToString((File) mockFile0, 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = FileIo.getFilenameWithoutExtension("com.pearson.eidetic.utilities.Threads");
      assertNotNull(string0);
      assertEquals("com.pearson.eidetic.utilities", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = FileIo.getFileLastModified("nXb");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = FileIo.getFileLastModified("");
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/testuser/Documents/NetBeansProjects/eidetic/RL0,RQ2n@.h/RL0,RQ2n@.h");
      FileSystemHandling.createFolder(evoSuiteFile0);
      boolean boolean0 = FileIo.doesFileExist("RL0,RQ2n@.h", "RL0,RQ2n@.h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("]O#IO#WL\nP@Ursp", "]O#IO#WL\nP@Ursp", " - Failed to convert stack-trace to string");
      boolean boolean1 = FileIo.doesFileExist("]O#IO#WL\nP@Ursp");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/testuser/Documents/NetBeansProjects/eidetic/Rxmr,/3N%&!l{JM '/Rxmr,/3N%&!l{JM '");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "|oYnC}!Gh#o]P{|o|");
      boolean boolean0 = FileIo.deleteFile("Rxmr,/3N%&!l{JM '", "Rxmr,/3N%&!l{JM '");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/testuser/Documents/NetBeansProjects/eidetic/`t#$^bUN;");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ",(V");
      boolean boolean0 = FileIo.deleteFile("`t#$^bUN;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      boolean boolean0 = FileIo.deleteDirectoryAndContents(mockFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileIo.getListOfFilenamesInADirectory("n%X;^2ejy-Gb|q+@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pearson.eidetic.utilities.FileIo", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.pearson.eidetic.utilities");
      String string0 = FileIo.readFileToString((File) mockFile0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/testuser/Documents/NetBeansProjects/eidetic/U");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("U");
      String string0 = FileIo.readFileToString((File) mockFile0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = FileIo.readFileToString("Pj~W");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      List<File> list0 = FileIo.getListOfFilesInADirectory("/");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      List<File> list0 = FileIo.getListOfFilesInADirectory("l9qa<><xmyMN~idHe");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      List<File> list0 = FileIo.getListOfFilesInADirectory("");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-dya<");
      MockFile mockFile1 = new MockFile((File) mockFile0, "'+OG'%xB)+~7");
      mockFile1.createNewFile();
      boolean boolean0 = FileIo.deleteDirectoryAndContents(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "_/7dE@0~mpU1GA");
      boolean boolean0 = FileIo.deleteDirectoryAndContents(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      boolean boolean0 = FileIo.deleteDirectoryAndContents(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFile("wJ7tZ?#\"xtWVn>0|_Yt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/testuser/Documents/NetBeansProjects/eidetic/U");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("U");
      String string0 = FileIo.readFileToString((File) mockFile0, 11, 11);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Or57kMnSk+Xmq#b", "Or57kMnSk+Xmq#b");
      String string0 = FileIo.readFileToString((File) mockFile0, (-1), 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FileIo", "[");
      String string0 = FileIo.readFileToString((File) mockFile0, 11, (-6));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = FileIo.readFileToString((File) null, 1, (-217));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/testuser/Documents/NetBeansProjects/eidetic/com.pearson.eidetic.utilities.FileIo/.");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      String string0 = FileIo.readFileToString("com.pearson.eidetic.utilities.FileIo", "./");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wJ7tZ?#\"xtWVn>0|_Yt", "");
      mockFile0.createNewFile();
      String string0 = FileIo.readFileToString((File) mockFile0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = FileIo.readFileToString((File) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = FileIo.readFileToString("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = FileIo.readFileToString((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("/", "K1]HcM#o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("POnL\"KxoK{=>_", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("a-:0ThR", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile((String) null, "com.pearson.eidetic.utilities.Threads");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("1x'MU2vO@", "jA");
      assertTrue(boolean0);
      
      boolean boolean1 = FileIo.saveStringToFile("1x'MU2vO@", ". must start with '/' or '*.'", "1x'MU2vO@");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("/*", "Warning - failed to delete ", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile(")~;|2znH4dECm", "rQkHvE", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("7M]zKkpnms", "", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("Warning - ", (String) null, "com.pearson.eidetic.utilities.Threads");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("", "", "_Pfl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile((String) null, "_?,NqxvE\"T)", "W^ ?{*=G5fHrjEBsg4-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = FileIo.getFilenameWithoutExtension("./");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = FileIo.getFilenameWithoutExtension("Rxmr,/3N%&!l{JM '");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = FileIo.getFilenameWithoutExtension("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = FileIo.getFilenameWithoutExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = FileIo.getFileExtensionFromFilename("*.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = FileIo.getFileExtensionFromFilename("D:Wb8cTZ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = FileIo.getFileExtensionFromFilename("com.pearson.eidetic.utilities.FileIo");
      assertNotNull(string0);
      assertEquals("FileIo", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = FileIo.getFileExtensionFromFilename("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = FileIo.getFileExtensionFromFilename((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Timeout-Timeunit cannot be null");
      List<File> list0 = FileIo.getListOfFilesInADirectory("O>!S_M", (List<String>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("/");
      List<File> list0 = FileIo.getListOfFilesInADirectory("/", (List<String>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      List<File> list0 = FileIo.getListOfFilesInADirectory("=ay*.", (List<String>) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<File> list0 = FileIo.getListOfFilesInADirectory("", (List<String>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<File> list0 = FileIo.getListOfFilesInADirectory("/", (List<String>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      List<File> list0 = FileIo.getListOfFilesInADirectory((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("7M]zKkpnms", "7M]zKkpnms", "7M]zKkpnms");
      assertTrue(boolean0);
      
      List<String> list0 = FileIo.getListOfFilenamesInADirectory("7M]zKkpnms");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      List<String> list0 = FileIo.getListOfFilenamesInADirectory("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      List<String> list0 = FileIo.getListOfFilenamesInADirectory((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("*=", "*=", "_/7dE@0~mpU1GA");
      assertTrue(boolean0);
      
      List<File> list0 = FileIo.getListOfDirectoryFilesInADirectory("*=");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      List<File> list0 = FileIo.getListOfDirectoryFilesInADirectory("U8%Y,WYO");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      List<File> list0 = FileIo.getListOfDirectoryFilesInADirectory("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      List<File> list0 = FileIo.getListOfDirectoryFilesInADirectory("/");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      List<File> list0 = FileIo.getListOfDirectoryFilesInADirectory((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("/");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-dya<");
      MockFile mockFile1 = new MockFile((File) mockFile0, "'+OG'%xB)+~7");
      mockFile1.createNewFile();
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("-dya<");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("");
      List<File> list1 = FileIo.getListOfFilesInADirectory((String) null, list0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("com.pearson.eidetic.utilities.StackTrace");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/testuser/Documents/NetBeansProjects/eidetic/WazF+^1YmH'cHA/2z0<JIk [F%vBmqP");
      FileSystemHandling.createFolder(evoSuiteFile0);
      boolean boolean0 = FileIo.copyFile("WazF+^1YmH'cHA", "2z0<JIk [F%vBmqP", "?CG&AG5?'", "WazF+^1YmH'cHA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/testuser/Documents/NetBeansProjects/eidetic/WazF+^1YmH'cHA/2z0<JIk [F%vBmqP");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "/");
      boolean boolean0 = FileIo.copyFile("WazF+^1YmH'cHA", "2z0<JIk [F%vBmqP", "?YG&A5?'", "WazF+^1YmH'cHA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile("?CG&AG5?'", "Y[H", "/", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile("org.eclipse.jetty.http.PathMap", "/mH#", "jHK3bU|XA1)4+lIG", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile("/", "/*", "", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile("FileIo", "u.l`M(iPh", (String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile("com.pearson.eidetic.utilities.FileIo", "", "com.pearson.eidetic.utilities.FileIo", "sW54~XL#t^9xT}O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile("*.", (String) null, "QvVM<`FA2MU5.kCS8S", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile("", "", "wJ7tZ?#\"xtWVn>0|_Yt", " milliseconds");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile((String) null, "", " seconds", "com.pearson.eidetic.utilities.Threads");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FileIo.renameFile(" minutes", ";S~%%,s,AJ1", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FileIo.renameFile("0rY+N", " failed to delete", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileIo.renameFile("TimeoutTime cannot be null or less than 0", "", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileIo.renameFile("com.pearson.eidetic.utilities.FileIo", (String) null, " - Failed to convert stack-trace to string");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileIo.renameFile("", "_|YC]", "./");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileIo.renameFile((String) null, "4[+yz^te]ap\u0003$", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileIo.doesFileExist("Pbi/;g}1-(=?nV=dC*", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileIo.doesFileExist("ThreadExecutor cannot be null", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileIo.doesFileExist("", "Warning - ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = FileIo.doesFileExist((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileIo.doesFileExist("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileIo.doesFileExist((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileIo.deleteDirectoryAndContents((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("hd", "hd");
      assertTrue(boolean0);
      
      boolean boolean1 = FileIo.deleteDirectorySubdirectories("/");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("]O#IO#WL\nP@Ursp", "]O#IO#WL\nP@Ursp", " - Failed to convert stack-trace to string");
      boolean boolean1 = FileIo.deleteDirectorySubdirectories("]O#IO#WL\nP@Ursp");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileIo.deleteDirectorySubdirectories((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RegexSet regexSet0 = new RegexSet();
      regexSet0.add(";S~%%,s,AJ1");
      boolean boolean0 = FileIo.deleteDirectoryFiles(regexSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RegexSet regexSet0 = new RegexSet();
      regexSet0.add("");
      boolean boolean0 = FileIo.deleteDirectoryFiles(regexSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RegexSet regexSet0 = new RegexSet();
      regexSet0.add((String) null);
      boolean boolean0 = FileIo.deleteDirectoryFiles(regexSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = FileIo.deleteDirectoryFiles((Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile(" - Failed to convert stack-trace to string", "Y", "Y");
      boolean boolean1 = FileIo.deleteFilesInADirectory(" - Failed to convert stack-trace to string");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFilesInADirectory("/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFilesInADirectory("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFilesInADirectory((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFile("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFile((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFile("b\u0006pjPc{vD", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFile("/", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFile("", "_|YC]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFile((String) null, "TimeoutTime cannot be null or less than 0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/testuser/Documents/NetBeansProjects/eidetic/_/7dE@0~mpU1GA/_/7dE@0~mpU1GA");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      boolean boolean0 = FileIo.createDirectory("_/7dE@0~mpU1GA", "_/7dE@0~mpU1GA");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileIo.createDirectory("UQa", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileIo.createDirectory("U8%Y,WYO", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileIo.createDirectory("", "W>S_QaenZ&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = FileIo.createDirectory((String) null, "Warning - ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileIo fileIo0 = new FileIo();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileIo.getFileLastModified((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = FileIo.readFileToString("-dya<", "-dya<");
      assertNull(string0);
  }
}
