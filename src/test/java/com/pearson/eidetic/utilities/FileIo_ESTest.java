/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 13 17:54:22 GMT 2015
 */

package com.pearson.eidetic.utilities;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pearson.eidetic.utilities.FileIo;
import java.io.File;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileIo_ESTest extends FileIo_ESTest_scaffolding {

  @Test
  public void test000()  throws Throwable  {
      FileIo.saveStringToFile("Fa<:]3bB$'et l", "Fa<:]3bB$'et l", "Fa<:]3bB$'et l");
      FileIo.getListOfFilesInADirectory("Fa<:]3bB$'et l");
  }

  @Test
  public void test001()  throws Throwable  {
      FileIo.getListOfFilesInADirectory("R|h");
  }

  @Test
  public void test002()  throws Throwable  {
      FileIo.getListOfFilesInADirectory("");
  }

  @Test
  public void test003()  throws Throwable  {
      FileIo.saveStringToFile("Warning - ", "Warning - ", "Warning - ");
      FileIo.readFileToString("Warning - ", "Warning - ");
  }

  @Test
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sx~a$FSH{>R_c");
      mockFile0.createNewFile();
      FileIo.readFileToString((File) mockFile0);
  }

  @Test
  public void test005()  throws Throwable  {
      FileIo.getFileLastModified("");
  }

  @Test
  public void test006()  throws Throwable  {
      FileIo.saveStringToFile("Qo", "Qo");
      FileIo.doesFileExist("Qo");
  }

  @Test
  public void test007()  throws Throwable  {
      FileIo.saveStringToFile(")<", ")<");
      FileIo.deleteFile(")<");
  }

  @Test
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}~B>D3?9JBi?TT,", "");
      FileIo.readFileToString((File) mockFile0, 0, 0);
  }

  @Test
  public void test009()  throws Throwable  {
      FileIo.readFileToString("5", (String) null);
  }

  @Test
  public void test010()  throws Throwable  {
      FileIo.copyFile(" failed to delete", " failed to delete", "1#;yz9X[1zlw\"5 ", ":R4>");
  }

  @Test
  public void test011()  throws Throwable  {
      FileIo.renameFile("{e!$", "pr{6+6h(!}*)", "Sleeping for ");
  }

  @Test
  public void test012()  throws Throwable  {
      FileIo.createDirectory("-0}^m&/\"2", "0)@*VuNmB4(|");
  }

  @Test
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileIo.getFileLastModified((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.File", e);
      }
  }

  @Test
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" - Failed to convert stack-trace to string");
      FileIo.readFileToString((File) mockFile0, 2639, (-1));
  }

  @Test
  public void test015()  throws Throwable  {
      FileIo.readFileToString((File) null, (-1270), (-1270));
  }

  @Test
  public void test016()  throws Throwable  {
      FileIo.readFileToString((String) null);
  }

  @Test
  public void test017()  throws Throwable  {
      FileIo.saveStringToFile("iM p+Seqvc`K\"%n", "");
  }

  @Test
  public void test018()  throws Throwable  {
      FileIo.saveStringToFile("", "");
  }

  @Test
  public void test019()  throws Throwable  {
      FileIo.saveStringToFile((String) null, (String) null);
  }

  @Test
  public void test020()  throws Throwable  {
      FileIo.saveStringToFile("ID|+`f],9\",p", "Z/cQ%", "");
  }

  @Test
  public void test021()  throws Throwable  {
      FileIo.saveStringToFile("TimeoutTime cannot be null or less than 0", ":uFx#`t@pe7z03*>", (String) null);
  }

  @Test
  public void test022()  throws Throwable  {
      FileIo.saveStringToFile("h1?q", "", "");
  }

  @Test
  public void test023()  throws Throwable  {
      FileIo.saveStringToFile("~8[*F6", (String) null, (String) null);
  }

  @Test
  public void test024()  throws Throwable  {
      FileIo.saveStringToFile("", "=3(Br;tX", "!ZzA]DJNz");
  }

  @Test
  public void test025()  throws Throwable  {
      FileIo.getFilenameWithoutExtension((String) null);
  }

  @Test
  public void test026()  throws Throwable  {
      FileIo.getFileExtensionFromFilename("&bQ[^.");
  }

  @Test
  public void test027()  throws Throwable  {
      FileIo.getFileExtensionFromFilename("");
  }

  @Test
  public void test028()  throws Throwable  {
      FileIo.getListOfFilesInADirectory("B14v5vb#`j;FX", (List<String>) null);
  }

  @Test
  public void test029()  throws Throwable  {
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("g");
      FileIo.getListOfFilesInADirectory("", list0);
  }

  @Test
  public void test030()  throws Throwable  {
      FileIo.getListOfFilesInADirectory((String) null, (List<String>) null);
  }

  @Test
  public void test031()  throws Throwable  {
      FileIo.getListOfFilesInADirectory((String) null);
  }

  @Test
  public void test032()  throws Throwable  {
      FileIo.getListOfFilenamesInADirectory("");
  }

  @Test
  public void test033()  throws Throwable  {
      FileIo.getListOfDirectoryFilesInADirectory((String) null);
  }

  @Test
  public void test034()  throws Throwable  {
      FileIo.saveStringToFile("]C\"h#ex", "~O=`s,Ek;Ic]qnz", "5");
      FileIo.getListOfDirectoryNamesInADirectory("]C\"h#ex");
  }

  @Test
  public void test035()  throws Throwable  {
      FileIo.getListOfDirectoryNamesInADirectory((String) null);
  }

  @Test
  public void test036()  throws Throwable  {
      FileIo.copyFile(" failed to delete", " failed to delete", "1#;yz9X[1zlw\"5 ", "");
  }

  @Test
  public void test037()  throws Throwable  {
      FileIo.copyFile("|DRRj{", "|DRRj{", "", "");
  }

  @Test
  public void test038()  throws Throwable  {
      FileIo.copyFile("#=!*.T", "Warning - failed to delete ", (String) null, "Warning - ");
  }

  @Test
  public void test039()  throws Throwable  {
      FileIo.copyFile("]C\"h#ex", "", "H${RN$=o!=OFC", "");
  }

  @Test
  public void test040()  throws Throwable  {
      FileIo.copyFile("Npwk83Qu0z*~", (String) null, "Npwk83Qu0z*~", "Npwk83Qu0z*~");
  }

  @Test
  public void test041()  throws Throwable  {
      FileIo.copyFile("", "", "", "");
  }

  @Test
  public void test042()  throws Throwable  {
      FileIo.copyFile((String) null, "N8gBWA94/WAN/fomi", "!ZzA]DJNz", "");
  }

  @Test
  public void test043()  throws Throwable  {
      FileIo.renameFile("TimeoutTime cannot be null or less than 0", "=5-", "");
  }

  @Test
  public void test044()  throws Throwable  {
      FileIo.renameFile("{e!$", "pr{6+6h(!}*)", (String) null);
  }

  @Test
  public void test045()  throws Throwable  {
      FileIo.renameFile("|DRRj{", "", "jAuZ8t@iiLU|");
  }

  @Test
  public void test046()  throws Throwable  {
      FileIo.renameFile("R ,v/3I)(zw;3|Ms", (String) null, "com.pearson.eidetic.utilities.FileIo");
  }

  @Test
  public void test047()  throws Throwable  {
      FileIo.renameFile((String) null, " failed to delete", "(Tb=N_7PX>0^qBEi's");
  }

  @Test
  public void test048()  throws Throwable  {
      FileIo.doesFileExist("W_q", "");
  }

  @Test
  public void test049()  throws Throwable  {
      FileIo.doesFileExist("\"9Z'-VTsf7rw*Z#0Fq", (String) null);
  }

  @Test
  public void test050()  throws Throwable  {
      FileIo.doesFileExist((String) null, "");
  }

  @Test
  public void test051()  throws Throwable  {
      FileIo.doesFileExist((String) null);
  }

  @Test
  public void test052()  throws Throwable  {
      FileIo.deleteDirectoryAndContents((File) null);
  }

  @Test
  public void test053()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      FileIo.deleteDirectoryFiles(linkedHashSet0);
  }

  @Test
  public void test054()  throws Throwable  {
      FileIo.deleteFilesInADirectory((String) null);
  }

  @Test
  public void test055()  throws Throwable  {
      FileIo.deleteFile("");
  }

  @Test
  public void test056()  throws Throwable  {
      FileIo.deleteFile(" failed to delete", (String) null);
  }

  @Test
  public void test057()  throws Throwable  {
      FileIo.deleteFile("", "");
  }

  @Test
  public void test058()  throws Throwable  {
      FileIo.deleteFile((String) null, "#w[~_\"bhOB,^RtYsR");
  }

  @Test
  public void test059()  throws Throwable  {
      FileIo.saveStringToFile("Fa<:]3bB$'et l", "Fa<:]3bB$'et l", "Fa<:]3bB$'et l");
      FileIo.createDirectory("Fa<:]3bB$'et l", "Fa<:]3bB$'et l");
  }

  @Test
  public void test060()  throws Throwable  {
      FileIo.createDirectory("ThreadExecutor cannot be null", "");
  }

  @Test
  public void test061()  throws Throwable  {
      FileIo.createDirectory("lmYnW*&jpAQoBj<Nt", (String) null);
  }

  @Test
  public void test062()  throws Throwable  {
      FileIo.createDirectory((String) null, "");
  }

  @Test
  public void test063()  throws Throwable  {
      FileIo fileIo0 = new FileIo();
  }

  @Test
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIo.saveStringToFile("#<'c", "SDIwRiw-x/W>8[oY;]", "(~-|b5");
  }

  @Test
  public void test065()  throws Throwable  {
      FileIo.saveStringToFile((String) null, (String) null, "/UO8m19f`?1> ^mtF,8");
  }

  @Test
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIo.saveStringToFile("com.pearson.eidetic.utilities.FileIo", "y<^0tLqDSr!ikA");
  }

  @Test
  public void test067()  throws Throwable  {
      FileIo.saveStringToFile("-0}^m&/\"2", (String) null);
  }

  @Test
  public void test068()  throws Throwable  {
      FileIo.renameFile("", "", "bOZL");
  }

  @Test
  public void test069()  throws Throwable  {
      FileIo.readFileToString("");
  }

  @Test
  public void test070()  throws Throwable  {
      MockFile mockFile0 = new MockFile("k1;<~J2", "com.pearson.eidetic.utilities.StackTrace");
      String string0 = FileIo.readFileToString((File) mockFile0, 1, 1433);
      assertNull(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "*ywaq/]");
      String string0 = FileIo.readFileToString((File) mockFile0, (-1), 1755);
      assertNull(string0);
  }

  @Test
  public void test072()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile(" failed to delete", "IH|cln%?U;]&rR`9");
      assertTrue(boolean0);
      
      String string0 = FileIo.readFileToString(" failed to delete");
      assertNotNull(string0);
      assertEquals("IH|cln%?U;]&rR`9", string0);
  }

  @Test
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1;<JJ2", "com.pearson.eidetic.utilities.StackTrace");
      mockFile0.createNewFile();
      String string0 = FileIo.readFileToString((File) mockFile0, 1, 1433);
      assertEquals("", string0);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = FileIo.readFileToString((File) null);
      assertNull(string0);
  }

  @Test
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bOZL", "Timeout-Timeunit cannot be null");
      String string0 = FileIo.readFileToString((File) mockFile0);
      assertNull(string0);
  }

  @Test
  public void test076()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      List<File> list0 = FileIo.getListOfFilesInADirectory("TimeoutTime cannot be null or less than 0", (List<String>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test
  public void test077()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<File> list0 = FileIo.getListOfFilesInADirectory("~FbNq)gMcF)4z5K", (List<String>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test078()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("]C\"h#ex", "~O=`s,Ek;Ic]qnz", "5");
      assertTrue(boolean0);
      
      List<String> list0 = FileIo.getListOfFilenamesInADirectory("]C\"h#ex");
      assertFalse(list0.isEmpty());
  }

  @Test
  public void test079()  throws Throwable  {
      List<String> list0 = FileIo.getListOfFilenamesInADirectory((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileIo.getListOfFilenamesInADirectory("]C\"h#ex");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.pearson.eidetic.utilities.FileIo", e);
      }
  }

  @Test
  public void test082()  throws Throwable  {
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("");
      assertTrue(list0.isEmpty());
  }

  @Test
  public void test083()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("JfUj=aNccnm!$_q", " !MtvkV,a<G=WyJq#=", "JfUj=aNccnm!$_q");
      boolean boolean1 = FileIo.createDirectory("JfUj=aNccnm!$_q", "JfUj=aNccnm!$_q");
      assertTrue(boolean1 == boolean0);
      
      List<File> list0 = FileIo.getListOfDirectoryFilesInADirectory("JfUj=aNccnm!$_q");
      assertFalse(list0.isEmpty());
  }

  @Test
  public void test084()  throws Throwable  {
      List<File> list0 = FileIo.getListOfDirectoryFilesInADirectory("H${RN$=o!=OFC");
      assertTrue(list0.isEmpty());
  }

  @Test
  public void test085()  throws Throwable  {
      List<File> list0 = FileIo.getListOfDirectoryFilesInADirectory("");
      assertEquals(0, list0.size());
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = FileIo.getFilenameWithoutExtension("com.pearson.eidetic.utilities.Threads");
      assertEquals("com.pearson.eidetic.utilities", string0);
      assertNotNull(string0);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = FileIo.getFilenameWithoutExtension("");
      assertNull(string0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = FileIo.getFilenameWithoutExtension("Sleeping for ");
      assertNull(string0);
  }

  @Test
  public void test089()  throws Throwable  {
      long long0 = FileIo.getFileLastModified("&bQ[^.");
      assertEquals(0L, long0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = FileIo.getFileExtensionFromFilename("13zIJV4:U.g");
      assertNotNull(string0);
      assertEquals("g", string0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = FileIo.getFileExtensionFromFilename((String) null);
      assertNull(string0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = FileIo.getFileExtensionFromFilename("5");
      assertNull(string0);
  }

  @Test
  public void test093()  throws Throwable  {
      boolean boolean0 = FileIo.doesFileExist("~qr6d;l", "9HPg1X)?Ar:.?dxSf*");
      assertFalse(boolean0);
  }

  @Test
  public void test094()  throws Throwable  {
      boolean boolean0 = FileIo.doesFileExist("", "");
      assertFalse(boolean0);
  }

  @Test
  public void test095()  throws Throwable  {
      boolean boolean0 = FileIo.doesFileExist("");
      assertFalse(boolean0);
  }

  @Test
  public void test096()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile(" 2aiWed toGdelete", "!9kQ3", "!9kQ3");
      boolean boolean1 = FileIo.deleteFilesInADirectory(" 2aiWed toGdelete");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test097()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFilesInADirectory("");
      assertFalse(boolean0);
  }

  @Test
  public void test098()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFile("]C\"h#ex", "");
      assertFalse(boolean0);
  }

  @Test
  public void test099()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFile("]C\"h#ex", "Sleeping for ");
      assertFalse(boolean0);
  }

  @Test
  public void test100()  throws Throwable  {
      boolean boolean0 = FileIo.deleteFile((String) null);
      assertFalse(boolean0);
  }

  @Test
  public void test101()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("JfUj=aNccnm!$_q", " !MtvkV,a<G=WyJq#=", "JfUj=aNccnm!$_q");
      assertTrue(boolean0);
      
      boolean boolean1 = FileIo.createDirectory("JfUj=aNccnm!$_q", "JfUj=aNccnm!$_q");
      boolean boolean2 = FileIo.deleteDirectorySubdirectories("JfUj=aNccnm!$_q");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test
  public void test102()  throws Throwable  {
      boolean boolean0 = FileIo.deleteDirectorySubdirectories((String) null);
      assertFalse(boolean0);
  }

  @Test
  public void test103()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      boolean boolean0 = FileIo.deleteDirectoryFiles(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test
  public void test104()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add(":Ul)I';(?<");
      boolean boolean0 = FileIo.deleteDirectoryFiles(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test
  public void test105()  throws Throwable  {
      boolean boolean0 = FileIo.deleteDirectoryFiles((Set<String>) null);
      assertFalse(boolean0);
  }

//  @Test
//  public void test106()  throws Throwable  {
//      MockFile mockFile0 = new MockFile("", "");
//      boolean boolean0 = FileIo.deleteDirectoryAndContents(mockFile0);
//      assertFalse(boolean0);
//  }

  @Test
  public void test107()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("]C\"h#ex", "~O=`s,Ek;Ic]qnz", "5");
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("");
      boolean boolean1 = FileIo.deleteDirectoryAndContents(mockFile0);
      assertFalse(boolean1);
  }

  @Test
  public void test108()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      boolean boolean0 = FileIo.deleteDirectoryAndContents(mockFile0);
      assertFalse(mockFile0.canRead());
      assertTrue(boolean0);
  }

  @Test
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&bQ[^.");
      boolean boolean0 = FileIo.deleteDirectoryAndContents(mockFile0);
      assertFalse(boolean0);
  }

  @Test
  public void test110()  throws Throwable  {
      boolean boolean0 = FileIo.createDirectory("", "");
      assertFalse(boolean0);
  }

  @Test
  public void test111()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile("C4]?<E{EU9\u0000k{^9", "C4]?<E{EU9\u0000k{^9", "C4]?<E{EU9\u0000k{^9");
      boolean boolean1 = FileIo.copyFile("C4]?<E{EU9\u0000k{^9", "C4]?<E{EU9\u0000k{^9", "C4]?<E{EU9\u0000k{^9", "C4]?<E{EU9\u0000k{^9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test112()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile("]C\"h#ex", "Warning - failed to delete ", "H${RN$=o!=OFC", "Warning - failed to delete ");
      assertFalse(boolean0);
  }

  @Test
  public void test113()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile("PV!sEYm1Edhg", "bOZL", "/UO8m19f`?1> ^mtF,8", (String) null);
      assertFalse(boolean0);
  }
}
