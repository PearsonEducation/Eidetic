/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 04 20:49:26 GMT 2016
 */

package com.pearson.eidetic.utilities;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pearson.eidetic.utilities.FileIo;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.eclipse.jetty.util.RegexSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileIo_ESTest extends FileIo_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" failed to delete", "T~E3U4%<[");
      MockFile.createTempFile("T~E3U4%<[", "T~E3U4%<[");
      mockFile0.createNewFile();
      mockFile0.delete();
      mockFile0.createNewFile();
      mockFile0.setExecutable(true, true);
      MockFile mockFile1 = new MockFile("T~E3U4%<[", " failed to delete");
      mockFile0.setWritable(true);
      mockFile0.toURI();
      mockFile0.setExecutable(true, true);
      mockFile0.setWritable(true, true);
      FileIo.readFileToString((File) mockFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileIo.readFileToString("M_MP'`1t]xj", "M_MP'`1t]xj");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " failed to delete");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIo.copyFile("/", "/", "Gjas`", " failed to delete");
  }

  @Test
  public void test01()  throws Throwable  {
      FileIo.deleteFile("", "u");
      MockFile mockFile0 = new MockFile("u");
      MockFile mockFile1 = new MockFile((File) mockFile0, "");
      mockFile1.setExecutable(false);
      mockFile0.renameTo(mockFile1);
      mockFile0.createNewFile();
      mockFile0.getAbsoluteFile();
      FileIo.readFileToString((File) mockFile0, 40, 41);
      FileIo.readFileToString("u", "u");
      FileIo.saveStringToFile(" failed to delete", "", "");
      FileIo.getListOfDirectoryNamesInADirectory("");
      // Undeclared exception!
      try { 
        FileIo.getListOfFilenamesInADirectory("u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.pearson.eidetic.utilities.FileIo", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      FileIo.deleteFile("/", "G{d");
      FileIo.saveStringToFile("Timeout-Timeunit cannot be null", "G{d", "/");
      FileIo.getListOfFilesInADirectory("/");
      FileIo.getFileExtensionFromFilename("Timeout-Timeunit cannot be null");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "} |/x=0wRPI'bj]]");
      FileIo.readFileToString("G{d", "G{d");
      FileIo.deleteFilesInADirectory((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileIo.getListOfFilesInADirectory(":,");
      FileIo.deleteFile("", "*2$_'\"O{o{c");
      FileIo.deleteDirectorySubdirectories("/");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileIo.getFileExtensionFromFilename("");
      FileIo.renameFile(" seconds", "G{d", "PZGuG!,S_*?ZkNyB)_");
      MockFile mockFile0 = new MockFile("PZGuG!,S_*?ZkNyB)_", " seconds");
      mockFile0.setReadable(false, false);
      MockFile.createTempFile("} |/x=0wRPI'bj]]", "");
      FileIo.readFileToString((File) mockFile0);
      FileIo.deleteDirectorySubdirectories((String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("/");
      FileIo.deleteDirectorySubdirectories("");
      FileIo.deleteDirectorySubdirectories("/");
      FileIo.getListOfFilesInADirectory("", list0);
      FileIo.renameFile("/", ". must start with '/' or '*.'", "");
      FileIo.doesFileExist(". must start with '/' or '*.'");
      FileIo.deleteFile("/");
  }

  @Test
  public void test04()  throws Throwable  {
      FileIo.deleteFile("Sleeping for ", "Sleeping for ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIo.saveStringToFile("Sleeping for ", "Sleeping for ", "Sleeping for ");
      FileIo.readFileToString("Sleeping for ", "Sleeping for ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-23);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
  }

  @Test
  public void test05()  throws Throwable  {
      FileIo.saveStringToFile("Sleeping for ", "Sleeping for ", "Sleeping for ");
      FileIo.createDirectory("Sleeping for ", "]");
      FileIo.deleteFilesInADirectory("Sleeping for ");
  }

  @Test
  public void test06()  throws Throwable  {
      FileIo.createDirectory("[7q{/x\"/dZR(%> UBu", "/}tLM9");
      FileIo.readFileToString(")", "[7q{/x\"/dZR(%> UBu");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIo.saveStringToFile(")", "<cwymuOw\u0003j");
      FileIo.saveStringToFile("[PB8p{?GAgatHPFUv", "[7q{/x\"/dZR(%> UBu");
      FileIo.readFileToString("[PB8p{?GAgatHPFUv", (String) null);
      FileIo.deleteFilesInADirectory((String) null);
      FileIo.deleteFile(")");
      FileIo.readFileToString("Warning - ", "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      try { 
        MockURI.URI((String) null, "", "[7q{/x\"/dZR(%> UBu", 28, "SywOw>OQj;[ry|Bi", "[PB8p{?GAgatHPFUv", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in authority at index 2: //@[7q{/x\"/dZR(%> UBu:28SywOw%3EOQj;%5Br%7Fy%7CBi?[PB8p%7B?GAgatHPFUv
         //
         assertThrownBy("java.net.URI$Parser", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      FileIo.getListOfDirectoryFilesInADirectory("R8R' G&0:4$C_");
      FileIo.getFileLastModified("R8R' G&0:4$C_");
      FileIo.doesFileExist((String) null);
      FileIo fileIo0 = new FileIo();
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory((String) null);
      FileIo.getListOfFilesInADirectory((String) null, list0);
      FileIo.saveStringToFile("R8R' G&0:4$C_", "R8R' G&0:4$C_", "R8R' G&0:4$C_");
      FileIo.deleteFilesInADirectory((String) null);
      FileIo.doesFileExist("R8R' G&0:4$C_", "R8R' G&0:4$C_");
      FileIo.getListOfFilenamesInADirectory("R8R' G&0:4$C_");
      FileIo.doesFileExist((String) null);
      FileIo.deleteDirectorySubdirectories("R8R' G&0:4$C_");
      FileIo.readFileToString("<nO\"", " failed to delete");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/uwalkj6/Documents/NetBeansProjects/eidetic/n]qv=m6");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
  }

  @Test
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile((File) mockFile0, "");
      FileIo.deleteDirectoryAndContents(mockFile1);
  }

  @Test
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", ")$");
      mockFile0.getAbsolutePath();
      mockFile0.toPath();
      mockFile0.setExecutable(false, false);
      mockFile0.delete();
      FileIo.readFileToString((File) mockFile0, 0, 0);
  }

  @Test
  public void test10()  throws Throwable  {
      FileIo.saveStringToFile((String) null, "_b0Npk*L");
      MockFile mockFile0 = new MockFile("TU$}7sR[!A,`", "");
      MockFile mockFile1 = new MockFile((File) mockFile0, "");
      FileIo.readFileToString((File) mockFile1, 0, (-15));
  }

  @Test
  public void test11()  throws Throwable  {
      FileIo.renameFile("", "", "e");
      // Undeclared exception!
      try { 
        FileIo.getFileLastModified((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.File", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      FileIo.readFileToString((File) null, (-36), (-36));
  }

  @Test
  public void test13()  throws Throwable  {
      FileIo.doesFileExist("`H@y y`c", "0.:0|l}8");
      FileIo.saveStringToFile("0.:0|l}8", "0.:0|l}8", "6");
  }

  @Test
  public void test14()  throws Throwable  {
      FileIo.readFileToString("'Z8$TUny#", "'Z8$TUny#");
      String string0 = "";
      URI uRI0 = MockURI.create("");
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         assertThrownBy("java.io.File", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      FileIo.saveStringToFile("Warning - failed to delete ", "8");
      FileIo.getListOfDirectoryFilesInADirectory("'");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "*-m?ktkBC]O";
      String string1 = "";
      FileIo.deleteFile("*-m?ktkBC]O", "");
      FileIo.readFileToString("");
      String string2 = "";
      String string3 = "";
      FileIo.copyFile("", "", "", "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIo.deleteFilesInADirectory("");
      // Undeclared exception!
      try { 
        FileIo.getListOfFilenamesInADirectory("9u1Sm_K7&X!W!+%4vF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.pearson.eidetic.utilities.FileIo", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      FileIo.deleteDirectorySubdirectories("b9n2bP-\"=|");
      FileIo.saveStringToFile("X&~=JDpAj~", "b9n2bP-\"=|", (String) null);
      FileIo.readFileToString("./", ".-`flV;");
      FileIo.copyFile("O9h<~]LP2n`?Z", "./", "/*", "E3qV");
      FileIo.getFileExtensionFromFilename((String) null);
      FileIo.copyFile("8g{sYu5OFU8.v*", ".fdvQA7YPF2J!", ".-`flV;", (String) null);
      FileIo.deleteDirectorySubdirectories((String) null);
      FileIo.readFileToString("8g{sYu5OFU8.v*", "E3qV");
      MockFile mockFile0 = new MockFile("./");
      mockFile0.setExecutable(true);
      FileIo.deleteDirectoryAndContents(mockFile0);
      FileIo.getListOfFilesInADirectory((String) null);
      FileIo.readFileToString("", (String) null);
  }

  @Test
  public void test17()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " seconds");
      FileIo.getFilenameWithoutExtension(";'R");
      MockFile mockFile0 = new MockFile(";'R");
      mockFile0.setReadOnly();
      mockFile0.setExecutable(false, false);
      mockFile0.mkdir();
      FileIo.readFileToString((File) mockFile0);
      mockFile0.setExecutable(false);
      FileIo.readFileToString((File) mockFile0);
      FileIo.deleteFilesInADirectory((String) null);
      FileIo.saveStringToFile(";'R", ":g[sh3w{li7A]");
      FileIo.readFileToString(":g[sh3w{li7A]", (String) null);
      FileIo.doesFileExist((String) null);
      FileIo.readFileToString((File) mockFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIo.createDirectory((String) null, "");
  }

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-98);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileIo.saveStringToFile("}3:<{6m||10}r", "}3:<{6m||10}r", "}3:<{6m||10}r");
      FileIo.getListOfDirectoryFilesInADirectory("");
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("}3:<{6m||10}r");
      FileIo.getListOfFilesInADirectory("}3:<{6m||10}r", list0);
      FileIo.createDirectory("", (String) null);
      FileIo.getFileExtensionFromFilename((String) null);
      FileIo.createDirectory((String) null, "W(\"yRl+EhK[ys^%eJ");
  }

  @Test
  public void test19()  throws Throwable  {
      FileIo.saveStringToFile("Sleeping for ", "Sleeping for ", "Sleeping for ");
      FileIo.createDirectory("Sleeping for ", "Sleeping for ");
  }

  @Test
  public void test20()  throws Throwable  {
      FileIo.getListOfDirectoryFilesInADirectory((String) null);
      FileIo.saveStringToFile((String) null, "Warning - ");
      FileIo.saveStringToFile(",xEQYx$N( 'l", "", "Warning - ");
      FileIo.deleteFile("e");
      FileIo.renameFile("Warning - ", "AT?Lj|i(Q<", "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)2;
      byteArray0[2] = (byte) (-124);
      byteArray0[6] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileIo.getListOfDirectoryFilesInADirectory("e");
  }

  @Test
  public void test21()  throws Throwable  {
      FileIo.getListOfFilesInADirectory("");
      FileIo.deleteDirectorySubdirectories("U@F$xs");
      FileIo.deleteFilesInADirectory("");
      FileIo.deleteDirectoryAndContents((File) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileIo.doesFileExist("N");
      FileIo.copyFile("", "", "9Wiuvq|%-B0U0W", "CWh`?Mb'{(");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIo.renameFile("9Wiuvq|%-B0U0W", "CWh`?Mb'{(", "Gg`e||");
  }

  @Test
  public void test22()  throws Throwable  {
      FileIo.deleteFile(")?K.9!YJ[0wX+IV'JOf");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileIo.deleteFile(")?K.9!YJ[0wX+IV'JOf", "z3");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileIo.saveStringToFile(")?K.9!YJ[0wX+IV'JOf", "TKJ[CM");
      FileIo.createDirectory("z3", "z3");
      FileIo.doesFileExist("TKJ[CM", "z3");
      FileIo.doesFileExist("^(");
      FileIo.getListOfFilesInADirectory("Warning - failed to delete ");
      FileIo.deleteFile("Warning - ", "4ouaY");
      FileIo.readFileToString("", "TKJ[CM");
      FileIo.saveStringToFile("", "");
      FileIo.getListOfFilesInADirectory((String) null);
      FileIo.copyFile("TKJ[CM", "Warning - failed to delete ", (String) null, "1mK xLdFM{fUS_@JP");
      FileIo.doesFileExist("5Ag;=1{z#JY$K,.8xR", ")?K.9!YJ[0wX+IV'JOf");
  }

  @Test
  public void test23()  throws Throwable  {
      FileIo.copyFile("", "", "", "");
      FileIo.deleteFile("", "2kk0YY498shZA");
      FileIo.saveStringToFile("2kk0YY498shZA", "");
      FileIo.createDirectory("", "");
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("");
      FileIo.getListOfFilesInADirectory("Bj", list0);
      FileIo.getListOfDirectoryFilesInADirectory("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("Sleeping for ", "");
      mockFile0.toURL();
      FileIo.readFileToString((File) mockFile0);
      FileIo.readFileToString("", "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIo.copyFile((String) null, "", "", (String) null);
      FileIo.copyFile("CP49]juvsEa D#/v6", (String) null, "Bj", "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIo.doesFileExist("t<dz;z Pam'>C@", "");
      FileIo.getListOfDirectoryFilesInADirectory("*aIvh");
      FileIo.createDirectory("Ige//Ozz|CbK", (String) null);
      FileIo.deleteFile("Ige//Ozz|CbK", "2kk0YY498shZA");
      FileIo.doesFileExist("B'/UpiB|(GA**", "*.");
      FileIo.getListOfDirectoryNamesInADirectory("");
      FileIo.saveStringToFile("CP49]juvsEa D#/v6", (String) null, "");
  }

  @Test
  public void test24()  throws Throwable  {
      FileIo.deleteDirectoryFiles((Set<String>) null);
      FileIo.saveStringToFile("p6g", "p6g", "p6g");
      MockFile mockFile0 = new MockFile("p6g", "w.6q({5k_ZAxs");
      mockFile0.toURL();
      mockFile0.getCanonicalFile();
      MockFile mockFile1 = new MockFile((File) mockFile0, "p6g");
      mockFile1.setReadable(true, true);
      MockFile.createTempFile("2>RoQ^", "p6g", (File) mockFile1);
      FileIo.deleteDirectoryAndContents(mockFile0);
      FileIo.getListOfFilesInADirectory("p6g");
      FileIo.doesFileExist("p6g", "p6g");
      FileIo.getFilenameWithoutExtension("`");
      try { 
        MockURI.URI("wD", "wD", "", (-1740), "", (String) null, "2>RoQ^");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected hostname at index 8: wD://wD@:-1740#2%3ERoQ%5E
         //
         assertThrownBy("java.net.URI$Parser", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      RegexSet regexSet0 = new RegexSet();
      regexSet0.add("r<]ni");
      regexSet0.add((String) null);
      FileIo.deleteDirectoryFiles(regexSet0);
      FileIo fileIo0 = new FileIo();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        FileIo.getListOfFilenamesInADirectory("d&'(w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.pearson.eidetic.utilities.FileIo", e);
      }
  }

  @Test
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'yv\"4p7!yXl[[d}0");
      FileIo.readFileToString((File) mockFile0);
      FileIo.deleteDirectorySubdirectories((String) null);
      mockFile0.delete();
      mockFile0.createNewFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIo.getListOfFilesInADirectory("", (List<String>) null);
      FileIo.getFilenameWithoutExtension("WN");
      FileIo.doesFileExist("l1-ttt!{e");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " -=jWpjn/");
      FileIo.getListOfDirectoryFilesInADirectory(" -=jWpjn/");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileIo.deleteDirectoryAndContents(mockFile0);
      FileIo.getListOfFilesInADirectory("Warning - ", (List<String>) null);
      FileIo.deleteFile(" -=jWpjn/", (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileIo.readFileToString((File) mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIo.getListOfDirectoryFilesInADirectory("");
      mockFile0.mkdirs();
      FileIo.getListOfDirectoryNamesInADirectory((String) null);
      FileIo.getFileLastModified(" -=jWpjn/");
      FileIo.deleteFile((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileIo.doesFileExist((String) null, "Warning - ");
  }

  @Test
  public void test27()  throws Throwable  {
      FileIo.getListOfDirectoryNamesInADirectory("i_D={Y_t6qjEz");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileIo.saveStringToFile("i_D={Y_t6qjEz", (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Warning - failed to delete ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
  }

  @Test
  public void test28()  throws Throwable  {
      FileIo.getListOfDirectoryNamesInADirectory("i_D={Y_t6qjEz");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileIo.saveStringToFile("i_D={Y_t6qjEz", (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Warning - failed to delete ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
  }

  @Test
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" failed to delete", "T~E3U4%<[");
      MockFile.createTempFile("T~E3U4%<[", "T~E3U4%<[");
      mockFile0.createNewFile();
      mockFile0.delete();
      mockFile0.createNewFile();
      mockFile0.setExecutable(true, true);
      MockFile mockFile1 = new MockFile("T~E3U4%<[", " failed to delete");
      mockFile0.setWritable(true);
      mockFile0.toURI();
      mockFile0.setExecutable(true, true);
      mockFile0.setWritable(false, false);
      FileIo.readFileToString((File) mockFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileIo.readFileToString("M_MP'`1t]xj", "M_MP'`1t]xj");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " failed to delete");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIo.copyFile("/", "/", "Gjas`", " failed to delete");
  }

  @Test
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" failed to delete");
      MockFile.createTempFile("T~E3U4%<[", "T~E3U4%<[");
      mockFile0.createNewFile();
      mockFile0.delete();
      mockFile0.createNewFile();
      mockFile0.setExecutable(true, true);
      MockFile mockFile1 = new MockFile("T~E3U4%<[", " failed to delete");
      mockFile0.setWritable(true);
      mockFile0.toURI();
      mockFile0.setExecutable(true, true);
      FileIo.readFileToString((File) mockFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileIo.readFileToString("M_MP'`1t]xj", "M_MP'`1t]xj");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " failed to delete");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIo.copyFile("/", "/", "Gjas`", " failed to delete");
  }

  @Test
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" failed to delete", " failed to delete");
      MockFile.createTempFile(" failed to delete", " failed to delete");
      mockFile0.createNewFile();
      mockFile0.delete();
      mockFile0.createNewFile();
      mockFile0.setExecutable(true, true);
      mockFile0.getAbsoluteFile();
      mockFile0.setWritable(true);
      mockFile0.toURI();
      mockFile0.setExecutable(true, false);
      mockFile0.setWritable(false, false);
      mockFile0.createNewFile();
      FileIo.readFileToString((File) mockFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileIo.getFilenameWithoutExtension("M_MP'`1t]xj");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " failed to delete");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
  }

  @Test
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)40;
      byteArray0[0] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E");
      List<String> list0 = FileIo.getListOfFilenamesInADirectory("/");
      FileIo.getListOfFilesInADirectory("/", list0);
      FileIo.deleteDirectorySubdirectories("E");
      FileIo.deleteDirectorySubdirectories("/");
      FileIo.renameFile("/", ". must start with '/' or '*.'", "E");
      FileIo.readFileToString("^(", "");
      FileIo.renameFile("^(", "^(", (String) null);
      FileIo.doesFileExist("C$\"\"y:B|6", "^(");
      MockFile mockFile0 = new MockFile("pCWWPi?8y0-");
      FileIo.readFileToString((File) mockFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C$\"\"y:B|6");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
  }

  @Test
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileIo.getListOfDirectoryNamesInADirectory("/");
      FileIo.getListOfDirectoryFilesInADirectory("/");
      FileIo.deleteDirectorySubdirectories("");
      FileIo.deleteDirectorySubdirectories("/");
      FileIo.renameFile("/", ". must start with '/' or '*.'", "");
      FileIo.readFileToString("^(", "");
      FileIo.renameFile("^(", "^(", (String) null);
  }

  @Test
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Warning - ");
      mockFile0.getAbsoluteFile();
      mockFile0.setWritable(false, false);
      mockFile0.setReadable(true);
      mockFile0.getAbsoluteFile();
      mockFile0.setExecutable(true);
      mockFile0.mkdirs();
      mockFile0.getCanonicalFile();
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.toPath();
      FileIo.readFileToString((File) mockFile0);
      FileIo.readFileToString("lb*}GEn$icdcA|,.", (String) null);
      FileIo.doesFileExist((String) null);
      FileIo.renameFile(". must start with '/' or '*.'", (String) null, (String) null);
      FileIo.deleteFile((String) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileIo.getFileLastModified("Warning - ");
      FileIo.saveStringToFile((String) null, "", (String) null);
      FileIo.getFileExtensionFromFilename("com.pearson.eidetic.utilities.StackTrace");
      FileIo.renameFile((String) null, (String) null, "");
      FileIo.doesFileExist("v)Y~}e#{XDJ[Z");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vpk-@=qd4G(w|hh");
  }

  @Test
  public void test35()  throws Throwable  {
      FileIo.readFileToString("", "0FB*pPdxsEh");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0FB*pPdxsEh");
      FileIo.saveStringToFile("", "0FB*pPdxsEh", (String) null);
      FileIo.doesFileExist("");
      FileIo.getFilenameWithoutExtension("Sz2kJuN*~v':S~%<e[");
      FileIo.deleteDirectorySubdirectories("0FB*pPdxsEh");
      FileIo.getFilenameWithoutExtension("*.");
      FileIo.deleteDirectorySubdirectories("*.");
      FileIo.getFileExtensionFromFilename("pSZ6/&qzR1n$k]");
      FileIo.getFileExtensionFromFilename("Sz2kJuN*~v':S~%<e[");
      FileIo.saveStringToFile(":,", "", "Mz?");
      FileIo.readFileToString("/(", (String) null);
      FileIo.getFileExtensionFromFilename((String) null);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "`B1Ew|%\\ua&VO8y&kWu";
      FileIo.deleteFile(string0, string0);
      MockFile mockFile0 = new MockFile("|*`b(A+ii1@$gY,O%", string0);
      mockFile0.toPath();
      mockFile0.getAbsoluteFile();
      MockFile mockFile1 = new MockFile((File) mockFile0, ";p^!MV`=c[*N@r<._");
      mockFile0.setLastModified(0L);
      mockFile0.renameTo(mockFile1);
      FileIo.createDirectory("", "org.eclipse.jetty.http.PathMap");
      FileIo.deleteFile(string0, "");
      mockFile0.setExecutable(false, false);
      FileIo.deleteDirectoryAndContents(mockFile1);
      FileIo.getFilenameWithoutExtension("com.pearson.eidetic.utilities.StackTrace");
      FileIo.copyFile("F3k[", " minutes", "F3k[", "");
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "1J2A";
      FileIo.getListOfFilesInADirectory((String) null);
      String string1 = "E";
      FileIo.copyFile("1J2A", "E", "E", "1J2A");
      // Undeclared exception!
      try { 
        FileIo.getListOfFilenamesInADirectory("1J2A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.pearson.eidetic.utilities.FileIo", e);
      }
  }

  @Test
  public void test38()  throws Throwable  {
      FileIo.deleteFile("", "");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile((File) mockFile0, "");
      mockFile1.setExecutable(false);
      mockFile0.renameTo(mockFile1);
      mockFile0.createNewFile();
      MockFile mockFile2 = (MockFile)mockFile0.getAbsoluteFile();
      FileIo.readFileToString((File) mockFile0, 40, 41);
      FileIo.readFileToString("", "");
      FileIo.saveStringToFile(" failed to delete", (String) null, "");
      FileIo.getListOfDirectoryNamesInADirectory((String) null);
      FileIo.getListOfFilenamesInADirectory("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FileIo.deleteDirectoryFiles(linkedHashSet0);
      FileIo.doesFileExist("cSZX", (String) null);
      FileIo.getListOfDirectoryFilesInADirectory("T+@JmJ 4^o`");
      FileIo.saveStringToFile("lo[\"yHS4)H7", (String) null, "lo[\"yHS4)H7");
      FileIo.deleteFile((String) null);
      FileIo.readFileToString((File) mockFile0, 40, (-1354));
      FileIo.doesFileExist("T+@JmJ 4^o`", "T+@JmJ 4^o`");
      FileIo fileIo0 = new FileIo();
      FileIo.doesFileExist((String) null, " failed to delete");
      FileIo.readFileToString((File) mockFile2);
      FileIo fileIo1 = new FileIo();
      FileIo.deleteDirectoryAndContents(mockFile1);
      FileIo.copyFile("Sleeping for ", "cSZX", "SHmHV", "n0?2\"{%GVjT");
      FileIo.readFileToString((File) mockFile2, (-1354), 3008);
      assertTrue(mockFile2.isFile());
      assertTrue(mockFile0.isFile());
  }

  @Test
  public void test39()  throws Throwable  {
      FileIo.getListOfFilenamesInADirectory("");
      FileIo.renameFile("", "%XAyBRK]\"iYwR_A-E)", "r<R({I@[x5a?:3V");
      boolean boolean0 = FileIo.deleteDirectorySubdirectories("%XAyBRK]\"iYwR_A-E)");
      assertTrue(boolean0);
      
      String string0 = FileIo.getFileExtensionFromFilename("%XAyBRK]\"iYwR_A-E)");
      assertNull(string0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("Warning - ");
      boolean boolean1 = FileIo.deleteDirectoryFiles(linkedHashSet0);
      boolean boolean2 = FileIo.renameFile((String) null, "r<R({I@[x5a?:3V", "r<R({I@[x5a?:3V");
      assertFalse(boolean2);
      
      FileIo.getListOfDirectoryFilesInADirectory("r<R({I@[x5a?:3V");
      FileIo.getListOfDirectoryNamesInADirectory("Warning - ");
      FileIo.readFileToString((File) null);
      FileIo.getListOfDirectoryNamesInADirectory((String) null);
      FileIo.createDirectory("Warning - ", "");
      FileIo fileIo0 = new FileIo();
      FileIo.readFileToString((String) null);
      FileIo.getListOfDirectoryFilesInADirectory((String) null);
      FileIo.deleteFile("Warning - ");
      boolean boolean3 = FileIo.doesFileExist("Warning - ");
      assertTrue(boolean3 == boolean1);
      
      FileIo.readFileToString("");
      FileIo.deleteFile(" milliseconds");
      FileIo.saveStringToFile("%XAyBRK]\"iYwR_A-E)", "Warning - ", (String) null);
      FileIo.readFileToString("", "%XAyBRK]\"iYwR_A-E)");
      FileIo.doesFileExist("N", (String) null);
      boolean boolean4 = FileIo.deleteFilesInADirectory("/");
      assertFalse(boolean4 == boolean0);
      
      FileIo.getListOfDirectoryFilesInADirectory(" milliseconds");
      boolean boolean5 = FileIo.deleteFile("", (String) null);
      assertTrue(boolean5 == boolean4);
  }

  @Test
  public void test40()  throws Throwable  {
      boolean boolean0 = FileIo.copyFile("PathSpec ", "qa%?+t", "", "V{2B f");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedList0.add("F[");
      linkedHashSet0.addAll(linkedList0);
      linkedList0.retainAll(linkedHashSet0);
      linkedList0.push("F[");
      linkedList0.remove();
      FileIo.getListOfFilesInADirectory("V{2B f", (List<String>) linkedList0);
      FileIo.deleteFile("ns+^*Ze5MG`Y+3/4d");
      MockFile mockFile0 = new MockFile("T&a1P");
      mockFile0.delete();
      MockFile mockFile1 = new MockFile((File) mockFile0, "T&a1P");
      boolean boolean1 = FileIo.deleteFilesInADirectory("J0*^D:[j5z:~C{L");
      assertFalse(boolean1 == boolean0);
      
      FileIo.renameFile("V{2B f", "qa%?+t", "PathSpec ");
      FileIo.getListOfFilesInADirectory("F[", (List<String>) linkedList0);
      boolean boolean2 = FileIo.deleteDirectorySubdirectories("T&a1P");
      boolean boolean3 = FileIo.saveStringToFile("Yf/kRL7~yez$e.;O|l", "T&a1P", "'62.");
      assertTrue(boolean3 == boolean2);
      
      FileIo.readFileToString((String) null, "9|HqxH+^.2");
      boolean boolean4 = FileIo.createDirectory("[", " seconds");
      assertFalse(boolean4 == boolean3);
  }

  @Test
  public void test41()  throws Throwable  {
      FileIo.readFileToString("");
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.toURL();
      FileIo.deleteDirectoryAndContents(mockFile0);
      FileIo.deleteFile("mX)6zSHfh9G]sW", "3jWqEY26BZ(OSHw1K2");
      FileIo.saveStringToFile("", "Iv");
      FileIo.renameFile(",QJ!7*G", "", "C6N=%f|i~9aU\"p@~");
      FileIo.getFilenameWithoutExtension(",QJ!7*G");
      FileIo.getFileExtensionFromFilename("C6N=%f|i~9aU\"p@~");
      FileIo.getListOfDirectoryNamesInADirectory((String) null);
      FileIo.renameFile("", "<", "1XYE");
      FileIo.saveStringToFile("Iv", "com.pearson.eidetic.utilities.FileIo");
      FileIo.deleteDirectoryAndContents(mockFile0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileIo.readFileToString("Iv");
      FileIo.deleteFilesInADirectory((String) null);
      String string0 = FileIo.getFileExtensionFromFilename("*.");
      assertNull(string0);
  }

  @Test
  public void test42()  throws Throwable  {
      FileIo.readFileToString("");
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.toURL();
      FileIo.deleteDirectoryAndContents(mockFile0);
      assertTrue(mockFile0.isFile());
      
      FileIo.deleteFile("mX)6zSHfh9G]sW", "3jWqEY26BZ(OSHw1K2");
      FileIo.saveStringToFile("lL8~FuS%", ")RIv");
      FileIo.renameFile(",QJ!7*G", "", "C6N=%f|i~9aU\"p@~");
      FileIo.getFilenameWithoutExtension(",QJ!7*G");
      FileIo.getFilenameWithoutExtension((String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileIo.renameFile("lL8~FuS%", "<", "1XYE");
      mockFile0.setExecutable(false, false);
      FileIo.saveStringToFile(")RIv", "com.pearson.eidetic.utilities.FileIo");
      FileIo.deleteDirectoryAndContents(mockFile0);
      FileIo.getListOfDirectoryNamesInADirectory((String) null);
      FileIo.readFileToString(")RIv");
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = FileIo.copyFile("Xm[", "", "*.", (String) null);
      assertFalse(boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      FileIo.copyFile("0F", "", (String) null, "");
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("");
      FileIo.getListOfFilesInADirectory((String) null, list0);
      FileIo.getListOfDirectoryNamesInADirectory("6:qLhtNv WbZ");
      FileIo.getFileExtensionFromFilename("F]Qj?92");
      FileIo.getListOfFilenamesInADirectory("");
      FileIo.doesFileExist("0F");
      FileIo.getFilenameWithoutExtension((String) null);
      FileIo.getFileExtensionFromFilename("");
      RegexSet regexSet0 = new RegexSet();
      regexSet0.add("");
      FileIo.deleteDirectoryFiles(regexSet0);
      FileIo.createDirectory("", (String) null);
      FileIo.doesFileExist("0F", "");
      FileIo.deleteFile("", "");
      FileIo.copyFile("./", "", "", (String) null);
      FileIo.createDirectory("6:qLhtNv WbZ", "H0ch-Bxl");
      FileIo.getListOfDirectoryNamesInADirectory((String) null);
      FileIo.getFileExtensionFromFilename("H0ch-Bxl");
      FileIo.getFilenameWithoutExtension("");
      FileIo.copyFile("H0ch-Bxl", "NP}I!XCp", "NP}I!XCp", "0F");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/uwalkj6/Documents/NetBeansProjects/eidetic/6:qLhtNv WbZ/H0ch-Bxl");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      List<File> list1 = FileIo.getListOfDirectoryFilesInADirectory("F]Qj?92");
      assertEquals(0, list1.size());
  }

  @Test
  public void test44()  throws Throwable  {
      FileIo.deleteFile("eq<");
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("eq<");
      LinkedList<File> linkedList0 = new LinkedList<File>();
      boolean boolean0 = FileIo.doesFileExist("", "PathSpec ");
      assertFalse(boolean0);
      
      FileIo.getFileLastModified("eq<");
      FileIo.deleteFilesInADirectory("");
      FileIo.readFileToString("");
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.toURL();
      FileIo.deleteDirectoryAndContents(mockFile0);
      FileIo.copyFile((String) null, (String) null, "", "eq<");
      mockFile0.createNewFile();
      boolean boolean1 = FileIo.deleteFile("mX)6zSHfh9G]sW", "3jWqEY26BZ(OSHwK2");
      boolean boolean2 = FileIo.saveStringToFile("", ")RIv");
      assertTrue(boolean2 == boolean1);
      
      FileIo.doesFileExist("1XYE", "pjzNOXD]=[99(");
      FileIo.getListOfFilesInADirectory("*.", list0);
      FileIo.renameFile(",QJ!7*G", "", "C6N=%f|i~9aU\"p@~");
      String string0 = FileIo.getFilenameWithoutExtension(",QJ!7*G");
      assertNull(string0);
      
      String string1 = FileIo.getFileExtensionFromFilename("C6N=%f|i~9aU\"p@~");
      assertNull(string1);
      
      FileIo.getListOfDirectoryNamesInADirectory((String) null);
      FileIo.renameFile("", "K/6d3R_#pf", "1XYE");
      FileIo.saveStringToFile(")RIv", "K/6d3R_#pf");
      FileIo.deleteDirectoryAndContents(mockFile0);
      FileIo.getListOfFilenamesInADirectory((String) null);
      boolean boolean3 = FileIo.saveStringToFile("3jWqEY26BZ(OSHwK2", "106p{/_C2c31", "*.");
      assertTrue(boolean3 == boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      FileIo.deleteFile("");
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("");
      FileIo.getListOfFilesInADirectory((String) null, list0);
      FileIo.doesFileExist("", "=uPtSc ");
      FileIo.getFileLastModified("");
      FileIo.deleteFilesInADirectory("");
      FileIo.readFileToString("");
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.toURL();
      FileIo.deleteDirectoryAndContents(mockFile0);
      FileIo.copyFile((String) null, (String) null, "", "");
      mockFile0.createNewFile();
      FileIo.deleteFile("mX)6zSHfh9G]sW", "3jWqEY26BZ(OSHwK2");
      FileIo.saveStringToFile("", ")RIv");
      FileIo.doesFileExist("1XYE", "pjzNOXD]=[99(");
      FileIo.getListOfFilesInADirectory("*.", list0);
      FileIo.renameFile(",QJ!7*G", "", "3jWqEY26BZ(OSHwK2");
      FileIo.getFilenameWithoutExtension(",QJ!7*G");
      FileIo.getFileExtensionFromFilename("1XYE");
      FileIo.getListOfDirectoryNamesInADirectory((String) null);
      FileIo.renameFile("", "K/6d3R_#pf", "1XYE");
      FileIo.saveStringToFile(")RIv", "com.pearson.eidetic.utilities.FileIo");
      FileIo.deleteDirectoryAndContents(mockFile0);
      List<String> list1 = FileIo.getListOfFilenamesInADirectory((String) null);
      assertEquals(0, list1.size());
  }

  @Test
  public void test46()  throws Throwable  {
      boolean boolean0 = FileIo.deleteDirectorySubdirectories("MhXr'89Mx");
      boolean boolean1 = FileIo.saveStringToFile("MhXr'89Mx", "MhXr'89Mx");
      assertTrue(boolean1 == boolean0);
      
      FileIo.getListOfDirectoryNamesInADirectory("MhXr'89Mx");
      FileIo.getListOfDirectoryNamesInADirectory("MhXr'89Mx");
      List<String> list0 = FileIo.getListOfFilenamesInADirectory("");
      assertTrue(list0.isEmpty());
      
      boolean boolean2 = FileIo.doesFileExist("", "sb");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("Timeout-Timeunit cannot be null");
      linkedHashSet0.add("MhXr'89Mx");
      linkedHashSet0.add("PathSpec ");
      boolean boolean3 = FileIo.deleteDirectoryFiles(linkedHashSet0);
      FileIo fileIo0 = new FileIo();
      boolean boolean4 = FileIo.saveStringToFile("MhXr'89Mx", "sb", "");
      assertTrue(boolean4 == boolean3);
      
      FileIo.getFilenameWithoutExtension("");
      MockFile mockFile0 = new MockFile("", "sb");
      FileIo.readFileToString((File) mockFile0);
      boolean boolean5 = FileIo.saveStringToFile("MOt&pcOtY", "");
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
  }

  @Test
  public void test47()  throws Throwable  {
      boolean boolean0 = FileIo.saveStringToFile(" failed to delete", "T(nt", " failed to delete");
      FileIo.getListOfDirectoryFilesInADirectory(" failed to delete");
      FileIo.readFileToString("");
      FileIo.deleteFile("Warning - failed to delete ");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = (MockFile)mockFile0.getAbsoluteFile();
      mockFile0.setReadOnly();
      mockFile0.getAbsolutePath();
      FileIo.readFileToString((File) mockFile0);
      String string0 = FileIo.getFilenameWithoutExtension("Warning - failed to delete ");
      assertNull(string0);
      
      FileIo.saveStringToFile("com.pearson.eidetic.utilities.FileIo", "Warning - failed to delete ", "T(nt");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      FileIo.readFileToString((String) null, "Warning - failed to delete ");
      linkedList0.add((String) null);
      List<File> list0 = FileIo.getListOfFilesInADirectory("&8", (List<String>) linkedList0);
      assertEquals(0, list0.size());
      
      FileIo.getListOfDirectoryNamesInADirectory("");
      FileIo.readFileToString((File) mockFile1, 61, (-377));
      String string1 = FileIo.getFileExtensionFromFilename("T(nt");
      assertNull(string1);
      
      FileIo.getFileLastModified("Warning - failed to delete ");
      FileIo.getFilenameWithoutExtension("");
      FileIo.doesFileExist("T(nt");
      boolean boolean1 = FileIo.createDirectory("@<@K!$VZ.Z:", " failed to delete");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test48()  throws Throwable  {
      FileIo.getFileLastModified("Warning - failed to delete ");
      FileIo.doesFileExist("Warning - failed to delete ");
      FileIo fileIo0 = new FileIo();
      List<String> list0 = FileIo.getListOfDirectoryNamesInADirectory("Warning - failed to delete ");
      FileIo.getListOfFilesInADirectory("Warning - failed to delete ", list0);
      FileIo.saveStringToFile("Warning - failed to delete ", "Warning - failed to delete ", "Warning - failed to delete ");
      FileIo.deleteFilesInADirectory("Warning - failed to delete ");
      FileIo.doesFileExist("Warning - failed to delete ", "Warning - failed to delete ");
      FileIo.getListOfFilenamesInADirectory("Warning - failed to delete ");
      FileIo.doesFileExist("Warning - failed to delete ");
      FileIo.deleteDirectorySubdirectories("n]qv=m6");
      FileIo.readFileToString("<nO\"", "*.");
      byte[] byteArray0 = new byte[1];
      FileIo.deleteFile("<nO\"", "Warning - failed to delete ");
      MockFile mockFile0 = new MockFile("Warning - failed to delete ", "Warning - failed to delete ");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile((File) mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.File", e);
      }
  }
}
