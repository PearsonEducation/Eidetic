/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 04 21:29:47 GMT 2016
 */

package com.pearson.eidetic.utilities;

import org.junit.Test;
import static org.junit.Assert.*;
import com.pearson.eidetic.utilities.PropertiesConfigurationWrapper;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PropertiesConfigurationWrapper_ESTest extends PropertiesConfigurationWrapper_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("rB=8Z", "rB=8Z");
      PropertiesConfigurationWrapper propertiesConfigurationWrapper0 = new PropertiesConfigurationWrapper((File) mockFile0);
      InputStream inputStream0 = propertiesConfigurationWrapper0.getConfigurationInputStream();
      assertNull(inputStream0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = PropertiesConfigurationWrapper.savePropertiesConfigurationToString((PropertiesConfiguration) null);
      assertNull(string0);
  }

  @Test
  public void test02()  throws Throwable  {
      PropertiesConfigurationWrapper propertiesConfigurationWrapper0 = new PropertiesConfigurationWrapper("@g#IRXE5(,n##N@X");
      String string0 = propertiesConfigurationWrapper0.savePropertiesConfigurationToString();
      assertNull(string0);
  }

  @Test
  public void test03()  throws Throwable  {
      PropertiesConfigurationWrapper.savePropertiesConfigurationFile("", "", (PropertiesConfiguration) null);
  }

  @Test
  public void test04()  throws Throwable  {
      PropertiesConfigurationWrapper propertiesConfigurationWrapper0 = new PropertiesConfigurationWrapper("9A]q9a@eja");
      propertiesConfigurationWrapper0.savePropertiesConfigurationFile((String) null, "9A]q9a@eja");
      assertFalse(propertiesConfigurationWrapper0.isValid());
  }

  @Test
  public void test05()  throws Throwable  {
      PropertiesConfigurationWrapper.savePropertiesConfigurationFile((File) null, (PropertiesConfiguration) null);
  }

  @Test
  public void test06()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      PropertiesConfigurationWrapper propertiesConfigurationWrapper0 = new PropertiesConfigurationWrapper((InputStream) dataInputStream0);
      PropertiesConfiguration propertiesConfiguration0 = propertiesConfigurationWrapper0.getPropertiesConfiguration();
      assertNull(propertiesConfiguration0);
  }

  @Test
  public void test07()  throws Throwable  {
      PropertiesConfigurationWrapper propertiesConfigurationWrapper0 = new PropertiesConfigurationWrapper("@g#IRXE5(,n##N@X");
      boolean boolean0 = propertiesConfigurationWrapper0.isValid();
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PropertiesConfigurationWrapper propertiesConfigurationWrapper0 = new PropertiesConfigurationWrapper((InputStream) byteArrayInputStream0);
      boolean boolean0 = propertiesConfigurationWrapper0.isValid();
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      PropertiesConfigurationWrapper propertiesConfigurationWrapper0 = new PropertiesConfigurationWrapper((InputStream) null);
      assertNull(propertiesConfigurationWrapper0.getConfigurationFilename());
  }

  @Test
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("rB=8Z", "rB=8Z");
      PropertiesConfigurationWrapper propertiesConfigurationWrapper0 = new PropertiesConfigurationWrapper((File) mockFile0);
      propertiesConfigurationWrapper0.savePropertiesConfigurationFile((File) mockFile0);
      assertEquals("rB=8Z/rB=8Z", mockFile0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      PropertiesConfigurationWrapper propertiesConfigurationWrapper0 = new PropertiesConfigurationWrapper((String) null);
      assertNull(propertiesConfigurationWrapper0.getConfigurationFilename());
  }

  @Test
  public void test12()  throws Throwable  {
      PropertiesConfigurationWrapper propertiesConfigurationWrapper0 = new PropertiesConfigurationWrapper((File) null);
      assertFalse(propertiesConfigurationWrapper0.isValid());
  }

  @Test
  public void test13()  throws Throwable  {
      PropertiesConfigurationWrapper propertiesConfigurationWrapper0 = new PropertiesConfigurationWrapper("@g#IRXE5(,n##N@X");
      String string0 = propertiesConfigurationWrapper0.getConfigurationFilename();
      assertNull(string0);
  }
}
